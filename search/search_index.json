{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Omoospace","text":"<p>Omoospace is a scalable directory structure solution for digital creation works. In order to follow omoospace rules easily, we provide CLI tools, including creating omoospace, shipping package, setting subspace, etc.</p> <p>What is \"Omoospace\", how does it rule all your creation files?</p> <p>The CLIs we provide is not a necessary tool, but just an auxiliary tool for managing omoospace. Because omoospace is just a directory structure guide, and is simple enough to create manually. By using the ClIs you can avoid the repetitive work of creating directories and have more global view of the whole project structure which consist of nested subspaces.</p>"},{"location":"#installation","title":"Installation","text":"<p>This tool requires python version 3.9 or above (python official download link). You can use pyenv or conda for managing multiple python versions on a single machine.</p> <p>Run the following command to install the dependencies:</p> <pre><code>$ pip install omoospace\n</code></pre> <p>Check if omoospace CLI tools is installed correctly.</p> <pre><code>$ omoospace --help\n</code></pre> <p>All commands are start with <code>omoospace</code>, however you can use alias <code>omoos</code>.</p> <pre><code>$ omoos --help\n</code></pre>"},{"location":"#create-new-omoospace","title":"Create New Omoospace","text":"<p>First things first, let's create a new omoospace, run the following command:</p> <pre><code>$ omoos create\n</code></pre> <p>Note</p> <p>Normally the new omoospace will be created at shell working directory. If you want other direcotry, add command option <code>-d</code>. e.g. <code>omoos create -d path/to/destination/dir/</code></p> <p>Follow the setup wizard.</p> <pre><code>? Choose a template '*Empty'\n? Choose the same again to confirm '*Empty'\n? Enter Omoospace name 'my project'\n? A brief of the Omoospace 'An omoospace for creation works'\n? Confirm 'Yes'\nStart create something! \ud83d\ude80\n</code></pre> <p>The new created directory structure is simple:</p> <pre><code>MyProject # Omoospace root directory.\n|-- Contents # Directory of all kinds of digital contents except sourece file.\n|-- ExternalData # Directory of data from external sources.\n|-- Omoospace.yml # Omoospace info, like its name, creators, works etc.\n|-- References # Directory of reference files.\n|-- SourceFiles # Directory of sourece files that saved working process.\n`-- StagedData # Directory of intermediate data, temp files, etc.\n</code></pre> <p>Note</p> <p>Notes that the name \"my project\" is converted to PascalCase Style \"MyProject\".</p> <p>If you want more complex subdirs, you can add subdirectories manually or choose other templates.</p> <p>Now, you can start your creation works by saving source files to <code>SourceFiles/</code> \ud83c\udf89</p>"},{"location":"#set-subspace-directory","title":"Set Subspace Directory","text":"<p>For better organization of source files, we need to separate the main goal into several secondary goals by set subspaces. Just create a directory with <code>Subspace.yml</code> in itself under <code>SourceFiles/</code>. Or run the following command:</p> <pre><code>$ omoos set subspace\n</code></pre> <p>Tip</p> <p>You can use command option <code>-s</code> instead of sub-command <code>subspace</code>. e.g. <code>omoos set -s</code></p> <p>Follow the setup wizard.</p> <pre><code>Current working at \ud83d\udee0\ufe0f my project\n(C:\\path\\to\\MyProject).\n? Enter subspace parent directory 'C:\\path\\to\\MyProject\\SourceFiles'\n? Enter subspace name 'my model'\n? Enter a comment of this subspace (Optional) 'a game asset'\n? Confirm 'Yes'\n</code></pre> <p>It creates subspace directory named \"MyModel\" as expected.</p> <pre><code>|-- SourceFiles\n|   `-- MyModel\n|       `-- Subspace.yml # The marker of subspace.\n</code></pre> <p>Now, you can save source files that relative to \"MyModel\" in it like below:</p> <pre><code>|-- SourceFiles\n|   `-- MyModel\n|       |-- ModelPart.blend # The complex part of model that prepared separately.\n|       |-- MyModel.blend # The main file of \"MyModel\" for shading, riging, lookdev, etc.\n|       |-- MyModel.spp # The source file of Substance 3D Painter.\n|       |-- MyModel.zpr # The project file of Zbrush.\n|       `-- Subspace.yml # The marker of subspace.\n</code></pre> <p>Note</p> <p>Notes that model textures are not saved here, but in Contents.</p>"},{"location":"#set-omoospace-profile","title":"Set Omoospace Profile","text":"<p>You can simply edit <code>Omoospace.yml</code> manually to edit omoospace profile. Or you can do it by using CLIs.</p> <p>To set creator</p> <pre><code>$ omoos set creator\n</code></pre> <p>To set software</p> <pre><code>$ omoos set software\n</code></pre> <p>To set work</p> <pre><code>$ omoos set work\n</code></pre> <p>Tip</p> <p>Also you can use option instead of sub-command. <code>omoos set -c</code> equls <code>omoos set creator</code> <code>omoos set -so</code> equls <code>omoos set software</code> <code>omoos set -w</code> equls <code>omoos set work</code></p>"},{"location":"#omoospace-summary-visualization","title":"Omoospace Summary Visualization","text":"<p>Another main feature of this CLI tools is overview of whole omoospace. We provide several graphs for better understanding the project structure. Run the following command:</p> <pre><code>$ omoos show\n</code></pre> <pre><code>Current working at \ud83d\udee0\ufe0f my project\n(C:\\path\\to\\MyProject).\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Summary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                           \u2502\n\u2502   Name                                                                    \u2502\n\u2502   my project (C:\\path\\to\\MyProject)                                       \u2502\n\u2502                                                                           \u2502\n\u2502   Description                                                             \u2502\n\u2502   An Omoospace for creation works                                         \u2502\n\u2502                                                                           \u2502\n\u2502   Creators                                                                \u2502\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                         \u2502\n\u2502   \u2502 manan Owner \u2502                                                         \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                         \u2502\n\u2502                                                                           \u2502\n\u2502   Softwares                                                               \u2502\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502   \u2502 Blender 3.6.4 \u2502 \u2502 Zbrush 2023.2 \u2502 \u2502 Substance 3D Painter 9.0.0 \u2502      \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2502                                                                           \u2502\n\u2502   Works                                                                   \u2502\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502   \u2502 Name                            \u2502 Paths                           \u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502\n\u2502   \u2502 MyModel                         \u2502 MyModel                         \u2502   \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                           \u2502\n\u2502   Subspace Tree                                                           \u2502\n\u2502   (Root)                       \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 instruction \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502   \u2570\u2500\u2500 \ud83d\udcc1 my model (MyModel)    \u2502 \ud83d\udcc1 --- direcotry subspace            \u2502   \u2502\n\u2502       \u2570\u2500\u2500 \ud83d\udcc4 ModelPart         \u2502 which contains Subspace.yml.         \u2502   \u2502\n\u2502                                \u2502                                      \u2502   \u2502\n\u2502                                \u2502 \ud83d\udcc4 --- file subspace                 \u2502   \u2502\n\u2502                                \u2502 which refers to a leaf file.         \u2502   \u2502\n\u2502                                \u2502                                      \u2502   \u2502\n\u2502                                \u2502 \ud83d\udcbf --- phantom | unknown subspace    \u2502   \u2502\n\u2502                                \u2502 which has no entity.                 \u2502   \u2502\n\u2502                                \u2502                                      \u2502   \u2502\n\u2502                                \u2502 \u26d4 --- virtual subspace              \u2502   \u2502\n\u2502                                \u2502 which have not created yet.          \u2502   \u2502\n\u2502                                \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                           \u2502\n\u2502   Subspace Entities                                                       \u2502\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502   \u2502 Subspace                  \u2502 Comments          \u2502 Entities          \u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502\n\u2502   \u2502 \ud83d\udcc1 my model (MyModel)     \u2502 - a game asset    \u2502 MyModel           \u2502   \u2502\n\u2502   \u2502                           \u2502                   \u2502 MyModel.blend     \u2502   \u2502\n\u2502   \u2502                           \u2502                   \u2502 MyModel.spp       \u2502   \u2502\n\u2502   \u2502                           \u2502                   \u2502 MyModel.zpr       \u2502   \u2502\n\u2502   \u2502 \ud83d\udcc4 ModelPart              \u2502                   \u2502 ModelPart.blend   \u2502   \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                           \u2502\n\u2502                                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>You can set the structure graph HTML file path by option <code>-r</code> to visualize the subspace tree.</p> <pre><code>$ omoos show -r .\n</code></pre> <p> subspace tree graph</p>"},{"location":"#switch-between-omoospaces","title":"Switch between omoospaces","text":"<p>You may note that every time you run a command, it will always prompt out <code>current working omoospace</code>.</p> <pre><code>Current working at \ud83d\udee0\ufe0f my project\n(C:\\path\\to\\MyProject).\n</code></pre> <p>It's necessary cos every command needs a target omoospace, but for convenient the CLI hide the referring setting behind. Here is the referring priority order of target omoospace.</p> <ol> <li>command option <code>-os</code> is for referring the target omoospace root path. e.g. if your run <code>omoos set -s -os C:\\Projects\\MyProject</code>, then subspace will be added to <code>C:\\Projects\\MyProject</code>.</li> <li>if <code>-os</code> is not set, then it will search from shell working directory to its root path until <code>Omoospace.yml</code> file is found.</li> <li>if <code>Omoospace.yml</code> is not found, then it read the <code>working omoospace</code> in global setting. <code>working omoospace</code> is the target omoospace of last executed command.</li> </ol> <p>Every time you run a command, it will do the 3 step to find the proper target. However, you still can change the <code>working omoospace</code> by yourself. Run the following command:</p> <pre><code>$ omoos to path/to/omoospace\n</code></pre> <p>If you leave the path empty, only <code>omoos to</code>, it will search from shell working directory. If it still not found, it will pop out a selection of recent target omoospaces for you.</p> <pre><code>No omoospace found in \".\".\n? Choose one from recent\n\u276f 'C:\\path\\to\\MyProject'\n  'C:\\path\\to\\OtherProject'\n</code></pre>"},{"location":"#export-package","title":"Export Package","text":"<p>Omoospace package is a data package for creative content sharing. To export a package, run the following command:</p> <pre><code>$ omoos export\n</code></pre> <p>Finish the setup wizard.</p> <pre><code>Current working at \ud83d\udee0\ufe0f my project\n(C:\\path\\to\\MyProject).\n? Enter the item path or path pattern\n'C:\\path\\to\\MyProject\\Contents\\MyModel'\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Pending \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e    \u256d\u2500\u2500\u2500\u2500 Checked \u2500\u2500\u2500\u2500\u256e\n\u2502                          \u2502    \u2502                 \u2502\n\u2502    ? Contents\\MyModel    \u2502 =&gt; \u2502                 \u2502\n\u2502                          \u2502    \u2502                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n? Check if the items on left are wanted 'Yes'\n\u256d\u2500\u2500\u2500\u2500 Pending \u2500\u2500\u2500\u2500\u256e    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Checked \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                 \u2502    \u2502                          \u2502\n\u2502                 \u2502 =&gt; \u2502    \u221a Contents\\MyModel    \u2502\n\u2502                 \u2502    \u2502                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n? Name this package 'my asset'\n? Enter a brief description of this package 'An omoospace package for sharing'\n? Enter the verison of this package '0.1.0'\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Export Package Form \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                           \u2502\n\u2502   Name                                                                    \u2502\n\u2502   my asset                                                                \u2502\n\u2502   (C:\\path\\to\\MyProject\\StagedData\\Packages\\MyAsset)                      \u2502\n\u2502                                                                           \u2502\n\u2502   Description                                                             \u2502\n\u2502   An omoospace package for sharing                                        \u2502\n\u2502                                                                           \u2502\n\u2502   Version                                                                 \u2502\n\u2502   0.1.0                                                                   \u2502\n\u2502                                                                           \u2502\n\u2502   Items                                                                   \u2502\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502   \u2502 Name    \u2502 Path                                                    \u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502\n\u2502   \u2502 MyModel \u2502 C:\\path\\to\\MyProject\\Contents\\MyModel                   \u2502   \u2502\n\u2502   \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                           \u2502\n\u2502                                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n? Sure Yes\nProcessing... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:00\nSuccessfully export! \ud83d\udce6\n</code></pre> <p>After that, a package directory will create in <code>StageData/Packages/</code> as default export path.</p> <pre><code>|-- StageData\n|   `-- Packages\n|       `-- MyAsset # The root directory of OmooCargo \"MyAsset\"\n|           |-- Contents # Where contains the model file.\n|           |-- README.md # Package's doc file.\n|           `-- Package.yml # Package profile, like its name, creators, etc.\n</code></pre> <p>Now you can share the package directory any way you like, attaching to email, upload to cloud, publish to GitHub etc.</p>"},{"location":"#import-package","title":"Import Package","text":"<p>Importing is easy, run the following command at omoospace root directory:</p> <pre><code>$ omoos import ~/Downloads/MyAsset.zip\n</code></pre> <p>After that, a package directory will create in <code>ExternalData/</code></p> <pre><code>|-- ExternalData\n|   `-- MyAsset\n|       |-- Contents\n|       |-- README.md\n|       `-- Package.yml\n</code></pre>"},{"location":"omoospace/","title":"What is omoospace?","text":"<p>Omoospace is a scalable directory structure solution for digital creation works. Its aim are universality, flexibility, and annotation. Not only for large projects and teamwork, but also for small projects and solo works. Whether it is a 3d modeling task or a series production, it all fits \ud83d\ude0a.</p>"},{"location":"omoospace/#overview","title":"Overview","text":"<p>The rules are simple:</p> <ol> <li>Naming everything with PascalCase.</li> <li> <p>5 main directories:</p> <ul> <li><code>SourceFiles</code> stores source files of the software.</li> <li><code>Contents</code> stores digital content in common format.</li> <li><code>ExternalData</code> stores data from external sources.</li> <li><code>References</code> stores reference resources (optional).</li> <li><code>StagedData</code> stores temporary data (optional).</li> </ul> </li> <li> <p>Subdirectories rules:</p> <ul> <li><code>SourceFiles</code> subdirectories are set by process names.</li> <li><code>Contents</code> subdirectories are set by content types.</li> </ul> </li> <li> <p>Set Subspaces by filename prefix or subdirectory based on creation objects.</p> </li> <li>Write the project profile info into Omoospace.yml. Such as creators, software versions, etc.</li> </ol> <p></p> <p>A diagram illustrating the structure of omoospace</p>"},{"location":"omoospace/#omoospace-structure","title":"Omoospace Structure","text":""},{"location":"omoospace/#subspace","title":"Subspace","text":"<p>Subspace is a sub-workspace based on creation objects, which is conducive to finding, sorting and understanding. Subspace can be nested, for example, an anime series project, each episode is a creation object, and under that object, multiple secondary objects can be set based on episode\u2019s sequences, and each secondary object can continue to be split. Each object is a sub-workspace of the main workspace. We call those sub-workspaces as \"Subspace\", and they are named after their objects.</p> <p>It is conceivable that the nested subspaces can generate a tree-like graph which presents the structure of the entire project, as shown in the figure below.</p> <p></p> <p>So how to set subspace? And what is worth noting when setting subspaces?</p>"},{"location":"omoospace/#subspace-can-be-set-by-filename-prefix-or-subdirectory","title":"Subspace can be set by filename prefix or subdirectory","text":"<p>Each namespace split by <code>_</code> is a subspace, for example:</p> <pre><code>Foo # (Root)\n|-- SourceFiles\n|   |-- AssetA.blend # (Root) &gt; AssetA\n|   |-- EP001.blend # (Root) &gt; EP001\n|   |-- EP001.prproj # (Root) &gt; EP001\n|   |-- EP002.blend # (Root) &gt; EP002\n|   |-- EP002.prproj # (Root) &gt; EP002\n|   |-- EP002_AssetB.blend # (Root) &gt; EP002 &gt; AssetB\n|   |-- EP002_SQ010.blend # (Root) &gt; EP002 &gt; SQ010\n|   `-- EP002_SQ020.blend # (Root) &gt; EP002 &gt; SQ020\n</code></pre> <p>Notes that one subspace may have multiple files to present them. We call those files Subspace Entity. And their parent subspaces form a route, we call them Subspace Route.</p> <p>You can also use subdirectories instead of filename prefix. In order to distinguish Subspace Directory from ordinary directories, subspace directory must contain a marker file named <code>Subspace.yml</code>.</p> <pre><code>Foo # (Root)\n|-- SourceFiles\n|   |-- AssetA.blend # (Root) &gt; AssetA\n|   |-- EP001 # (Root) &gt; EP001\n|   |   |-- Subspace.yml # marker\n|   |   |-- EP001.blend # (Root) &gt; EP001\n|   |   `-- EP001.prproj # (Root) &gt; EP001\n|   `-- EP002 # (Root) &gt; FilmB\n|       |-- Subspace.yml # marker\n|       |-- AssetB.blend # (Root) &gt; EP002 &gt; AssetB\n|       |-- EP002.blend # (Root) &gt; EP002\n|       |-- EP002.prproj # (Root) &gt; EP002\n|       |-- SQ010.blend # (Root) &gt; EP002 &gt; SQ010\n|       `-- SQ020.blend # (Root) &gt; EP002 &gt; SQ020\n</code></pre> <p>Besides as marker file, <code>Subspace.yml</code> is also for noting. You can leave any comment in it.</p> <pre><code># Subspace.yml\nComments to this subspace.\n</code></pre> <p>Or more formal.</p> <pre><code># Subspace.yml\nname: Subspace's name\ncomments: Comments to this subspace.\n</code></pre>"},{"location":"omoospace/#filename-prefix-and-subspace-directory-can-be-concatenated-and-overlap","title":"Filename prefix and subspace directory can be concatenated and overlap.","text":"<p>The subspace route of one entity is calculated by all its parent subspace directory and name prefix.</p> <pre><code>|-- SourceFiles\n|   |-- EP001 # (Root) &gt; EP001\n|   |   |-- Subspace.yml\n|   |   `-- SQ010_AssetA.blend # (Root) &gt; EP001 &gt; SQ010 &gt; AssetA\n</code></pre> <p>If the entity name prefix contains its parent subspace name. They should overlap each other as much as possible, for example:</p> <pre><code>|-- SourceFiles\n|   |-- EP001 # (Root) &gt; EP001\n|   |   |-- Subspace.yml\n|   |   `-- EP001_SQ010_AssetA.blend # (Root) &gt; EP001 &gt; SQ010 &gt; AssetA\n</code></pre> <pre><code>|-- SourceFiles\n|   |-- EP001_SQ010\n|   |   |-- Subspace.yml\n|   |   `-- EP001_SQ010_AssetA.blend # (Root) &gt; EP001 &gt; SQ010 &gt; AssetA\n</code></pre> <p>Note</p> <p>In above example, subspace <code>EP001</code> has no entity to present itself. we call it Phantom Subspace</p> <p>There is no strict rules of when to use concatenating or overlapping. It all up to user's decision. Creator should design the subspace name to fit the project needs.</p>"},{"location":"omoospace/#version-or-number-will-not-be-regarded-as-subspace-name","title":"Version or number will not be regarded as subspace name","text":"<p>Version or number as file's suffix is common naming convention. But for most time, the sub-version file has the same creation object as the main file. For example:</p> <pre><code>|-- SourceFiles\n|   |-- AssetA.blend # (Root) &gt; AssetA\n|   |-- AssetA_v001.blend # (Root) &gt; AssetA\n|   |-- AssetA_001.blend # (Root) &gt; AssetA\n|   `-- EP001_SQ010\n|       `-- EP001_SQ010_v001.blend # (Root) &gt; EP001 &gt; SQ010\n</code></pre> <p><code>AssetA_v001</code> is just another version <code>AssetA</code>. There is no new creation object be set.</p>"},{"location":"omoospace/#sourcefiles","title":"SourceFiles","text":"<p>It stores the source files of the software, or executable scripts, pipelines, etc.</p> <p><code>SourceFiles</code> stores processes, and <code>Contents</code> stores results. The former needs to be opened with specific software or executed by the program and need to be precomputed. The latter generally allows cross-software reading, and without any pre-computation.</p> <p>For example, using Blender's geometry node for procedural modeling. The source file of blender should be placed in <code>SourceFiles</code>. However, in order to load the procedural model in Unity, it is necessary to export as a general format, such as .fbx, and the exported file should be placed in <code>Contents</code>.</p>"},{"location":"omoospace/#subdirectories-by-process-name-optional","title":"Subdirectories by process name (optional)","text":"<p>Some optional process name:</p> <pre><code># Film production processes\n|-- SourceFiles\n|   |-- PreProduction\n|   |-- Production\n|   `-- PostProduction\n</code></pre> <pre><code># Post-production subprocesses\n|-- SourceFiles\n|   |-- Compositing\n|   |-- SoundEditing\n|   `-- VideoEditing\n</code></pre> <pre><code># 3D modeling processes\n|-- SourceFiles\n|   |-- Modeling\n|   |-- Texturing\n|   |-- Rendering\n|   `-- Shading\n</code></pre> <pre><code># Processes sorted by number\n|-- SourceFiles\n|   |-- 001-Preprocessing\n|   |-- 002-Scuplting\n|   |-- 003-Texturing\n|   |-- 004-Animation\n|   |-- 005-Lighting\n|   `-- 006-Compositing\n</code></pre> <p>Process directories and subspace directories can be mixed.</p> <pre><code>&lt;SeriesTitle&gt; # (Root)\n|-- SourceFiles\n|   |-- PreProduction\n|   |   `-- &lt;ModelName&gt; # (Root) &gt; &lt;ModelName&gt;\n|   `-- &lt;Episode&gt; # (Root) &gt; &lt;Episode&gt;\n|       |-- Subspace.yml\n|       |-- Production\n|       `-- PostProduction\n</code></pre> <p>Custom process subdirectories should fit your own workflow. But be aware of the following rules:</p> <ul> <li>Pay attention to the naming style. It should be a gerund for the process. For example, not Models but Modeling, not Scenes but SceneBuilding. In this way, the Process is emphasized, not the Result.</li> <li>You can adjust the process subdirectories freely as the project expands.</li> </ul>"},{"location":"omoospace/#put-source-files-without-creation-object-under-void-optional","title":"Put source files without creation object under Void (optional)","text":"<p>Most source files have its object, such as rendering images or export a 3D model. However, some source files are not used as the main process and have no certain object, but have storage needs. We put such source files in a special subspace called Void, which don\u2019t need <code>Subspace.yml</code>.</p> <p>Note</p> <p>Any subspaces in Void are also Void Subspace.</p> <p>Void subspace can be in filename prefix or as directory.</p> <pre><code>|-- SourceFiles\n|   |-- BeatingHeart\n|   |   `-- Void_HowToBeat.hip\n|   |-- Void_RnD_MetaBall.blend\n|   |-- Void\n|   |   `-- MaNan.hip\n</code></pre> <p>Note</p> <p>Although the source files under void subspace have no creation objects, they still allow outputing. However their outputs are not rigorous and necessary, but somewhat experimental and temporary. For example, <code>Void/HeartBeating.blend</code> can still render <code>Void_HeartBeating.0001.png</code>. The prefix <code>Void</code> indicates the results are experimental.</p>"},{"location":"omoospace/#contents","title":"Contents","text":"<p>It stores digital content in a common format, whether it is a work result or a resource, whether it is an internal or external. All files in here are organized to rules.</p>"},{"location":"omoospace/#subdirectories-by-content-type-optional","title":"Subdirectories by content type (optional)","text":"<p>Some optional content type:</p> <pre><code># For modeling propose\n|-- Contents\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   `-- Renders\n</code></pre> <pre><code># For short video production propose\n|-- Contents\n|   |-- Audios\n|   |-- Dynamics\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   |-- Renders\n|   `-- Videos\n</code></pre> <pre><code># For film production propose\n|-- Contents\n|   |-- Audios\n|   |-- Dynamics\n|   |-- Fonts\n|   |-- HDAs # Houdini Digital Assets\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   |   |-- Characters\n|   |   |-- Nature\n|   |   |-- Props\n|   |   `-- ...\n|   |-- Presets\n|   |-- Renders\n|   |-- Scenes\n|   |-- ScientificData\n|   |-- Scripts\n|   |-- Settings\n|   |-- Shaders\n|   `-- Videos\n</code></pre> <p>Custom type subdirectories should fit your own workflow. But be aware of the following rules:</p> <ul> <li>Pay attention to the naming style. Should be the plural of the content type noun.</li> <li>To avoid confusion and misplacement, try to merge similar content types into one.</li> <li>It is not recommended to set multi-level subdirectories, nor to adjust the type subdirectories as the project expands. Because content files, always as an IO path, need stability.</li> </ul>"},{"location":"omoospace/#the-output-of-source-file-is-named-after-its-entire-subspace-route","title":"The output of source file is named after its entire subspace route.","text":"<p>There is no subspace directory in <code>Contents</code>. But use the entire subspace route as file namespaces.</p> <p></p> <p>Observe their correspondence through specific examples.</p> <pre><code>BloodCellAndVessel\n|-- Contents\n|   |-- Models\n|   |   |-- BloodCells_Platelet.fbx\n|   |   |-- BloodCells_RBC.fbx\n|   |   `-- BloodCells_WBC.fbx\n|   |-- Images\n|   |   |-- BloodCellAndVessel.png\n|   |   `-- SkyHDRI.exr\n|   |-- Renders\n|   |   `-- BloodCellAndVessel\n|   |       |-- BloodCellAndVessel.0001.png\n|   |       `-- ...\n|   `-- Videos\n|       `-- BloodCellAndVessel.mp4\n|-- SourceFiles\n|   |-- BloodCellAndVessel.blend\n|   |-- BloodCellAndVessel.pptx\n|   `-- BloodCells.blend \n</code></pre> <p></p> <p>More complex example:</p> <pre><code>HowOrganWorks\n|-- Contents\n|   |-- Models\n|   |   |-- Heart\n|   |   |   |-- Heart.usd\n|   |   |   `-- Textures\n|   |   `-- BeatingHeart_CuttedHeart\n|   |       |-- BeatingHeart_CuttedHeart.usd\n|   |       `-- Textures\n|   |-- Dynamics\n|   |   |-- BeatingHeart_SQ010_Fog.vdb\n|   |   `-- BeatingHeart_SQ010_Beating.abc\n|   |-- Images\n|   |   |-- BeatingHeart_SQ010_VisualEffect\n|   |   |   |-- BeatingHeart_SQ010_VisualEffect.1001.png\n|   |   |   `-- ...\n|   |-- Renders\n|   |   |-- BeatingHeart_SQ010_SH0100\n|   |   |   |-- BeatingHeart_SQ010_SH0100.1001.png\n|   |   |   `-- ...\n|   |   `-- BeatingHeart_SQ010_SH0200\n|   |       |-- BeatingHeart_SQ010_SH0200.1001.png\n|   |       `-- ...\n|   |-- Videos\n|   |   `-- BeatingHeart.mp4\n|-- SourceFiles\n|   |-- Modeling\n|   |   `-- Heart\n|   |       |-- Subspace.yml\n|   |       |-- Heart.blend\n|   |       |-- Heart.spp\n|   |       `-- Valves.blend\n|   |-- BeatingHeart\n|   |   |-- Subspace.yml\n|   |   |-- CuttedHeart\n|   |   |   |-- Subspace.yml\n|   |   |   |-- CuttedHeart.blend\n|   |   |   |-- CuttedHeart.zpr\n|   |   |   `-- Valves.blend\n|   |   |-- BeatingHeart.prproj\n|   |   `-- SQ010\n|   |       |-- Subspace.yml\n|   |       |-- Beating.hip\n|   |       |-- Fog.EmberGen\n|   |       |-- VisualEffect.aep\n|   |       `-- SQ010.blend\n</code></pre> <p></p>"},{"location":"omoospace/#externaldata","title":"ExternalData","text":"<p>It stores all data files from external sources. The \u201cexternal\u201d here means that it is not generated by the creator of this omoospace, and not produced within this omoospace, either. The most common usage of <code>ExternalData</code> is to store resources from network. You can also put your own 3D assets' library directory into <code>ExternalData</code> as a soft link.</p>"},{"location":"omoospace/#no-need-to-follow-the-naming-rules-do-not-set-any-type-subdirectories","title":"No need to follow the naming rules, do not set any type subdirectories","text":"<p>Just keep its original file structure and naming style. For example:</p> <pre><code>|-- ExternalData\n|   |-- www.models.com_CT_Scanner\n|   |   |-- CT_Scanner.fbx\n|   |   `-- tex\n|   |-- textures_pack-4k\n|   |   |-- wood\n|   |   `-- metal\n|   |-- MyResources\n|   |   |-- Textures\n|   |   |-- Materials\n|   |   `-- Models\n</code></pre> <p>Note</p> <p>Do not put files at root directory of <code>ExternalData</code>, always under subdirectory.</p>"},{"location":"omoospace/#it-is-not-the-only-repository-for-all-external-data","title":"It is not the only repository for all external data","text":"<p><code>Contents</code> and <code>SourceFiles</code> also store external data. However, compared with <code>ExternalData</code>, they are stricter, all files need to be categorized and renamed properly. Meanwhile, <code>ExternalData</code> is a storage place that allows users to shipping data freely.</p> <p>For external source data, if it has been stored in <code>Contents</code> | <code>SourceFiles</code>, it has no need to be stored in <code>ExternalData</code> again. For example, a HDRI downloaded from the PolyHaven, as long as it is renamed to PascalCase style, it could be directly put under <code>Contents</code>.</p> <p>Note</p> <p>Categorizing, renaming are not fun works, so it is recommended to store external source data directly into <code>ExternalData</code> unless you can ensure files under <code>Contents</code> | <code>SourceFiles</code> strict to the rules.</p>"},{"location":"omoospace/#it-stores-omoospace-packages","title":"It stores omoospace packages","text":"<p>Package is an omoospace data package designed for sharing. The loaded Package will be stored in <code>ExternalData</code>. The source file can directly reference the file here.</p> <pre><code>|-- ExternalData\n|   |-- BloodCells # Package\n|   |   |-- Package.yml # Package info\n|   |   |-- Contents\n|   |   |   `-- Models\n|   |   |       `-- RedBooldCell.fbx\n|   |   `-- SourceFiles\n|   |       `-- RedBooldCell.blend\n</code></pre>"},{"location":"omoospace/#references","title":"References","text":"<p>It stores PureRef, Figma, Paper PDF, Storyboard. Although they will not be used directly by the source file, but still need to be saved. Put them here.</p> <p>Tip</p> <p>If it is figma online, put the link as file.</p>"},{"location":"omoospace/#stageddata","title":"StagedData","text":"<p>It stores any software-generated data that can be rebuilt after deletion, such as temporary files, caches, software bridging files, etc. There is no need to browser <code>StagedData</code> unless necessary.</p> <p>Directory structure automatically generated by software.</p>"},{"location":"omoospace/#omoospaceyml","title":"Omoospace.yml","text":"<p>It stores profile info such as creators, software versions, etc.</p> <pre><code>name: Omoospace's name\ndescription: A brief of this omoospace (Optional)\ncreators: # Creator list of this omoospace\n  - name: Creator's name\n    email: Creator's email (Optional)\n    role: Creator's role in this omoospace (Optional)\n    website: Creator's website (Optional)\nsoftwares: # Software list of this omoospace\n  - name: Software's name\n    version: Software's version\n    plugins: # Plugins list of this omoospace (Optional)\n      - name: Plugin's name\n        version: Plugin's version\nworks: # Work list of this omoospace\n  - name: Work's name\n    path: Work's path under Contents\n</code></pre> <p>For example:</p> <pre><code>name: my project\ndescription: An omoospace for creation works\ncreators:\n  - name: manan\n    email: icrdr2010@outlook.com\n    website:\n    role: Owner\nsoftwares:\n  - name: Blender\n    version: 3.6.4\n    plugins:\n  - name: Zbrush\n    version: 2023.2\n    plugins:\n  - name: Substance 3D Painter\n    version: 9.0.0\n    plugins:\nworks:\n  - name: MyModel\n    paths:\n    - MyModel\n</code></pre>"},{"location":"omoospace/#omoospace-package","title":"Omoospace Package","text":"<p>Inspired by Unity Package, Package is an omoospace data package designed for sharing.</p> <p>ExternalData acts like a Packages of Unity project, that storing data from other omoospaces.</p> <p>Unity - Manual: Reusing Assets between Projects</p> <p>The internal structure of Package is part of its source omoospace</p> <pre><code>&lt;PackageName&gt;\n|-- Contents # (Optional)\n|-- ExternalData # (Optional)\n|-- References # (Optional)\n|-- SourceFiles # (Optional)\n|-- StagedData # (Optional)\n|-- README.md\n`-- Package.yml # Package info\n</code></pre> <pre><code># Package.yml\nname: Package's name\nversion: Package's version\ndescription: A brief of this Package (Optional)\ncreators: # Creator list of this Package\n  - name: Creator's name\n    email: Creator's email (Optional)\n    role: Creator's role in this omoospace (Optional)\n    website: Creator's website (Optional)\n</code></pre> <p>Note</p> <p>Once Package is exported, it has nothing to do with its source omoospace</p>"},{"location":"omoospace/#comparison-with-other-software-project-structures","title":"Comparison with other software project structures","text":"<p>There are some common concepts to help understand.</p> Omoospace Unity Unreal Engine Contents Assets Content ExternalData Packages References SourceFiles Assets Source\u3001Content StagedData Temp Intermediate\u3001Saved\u3001DerivedDataCache Omoospace.yml PorjectSetting Config"},{"location":"omoospace/#qa","title":"Q&amp;A","text":"<ul> <li> <p>Q: Most directory structure solutions of CG work have no distinction between <code>Contents</code> and <code>SourceFiles</code>. Why omoospace emphasize their differences ?</p> <p>A: This is due to the different purposes of them. The content files, always as an IO path, need stability. So, <code>Contents</code> should be centralized, and its structure should be as flat as possible. Meanwhile, the source files, as entries of human operations, need accessible. People split their works by processes and objects, which are the best subdirectory rule of <code>SourceFiles</code>. Therefore, it is better to isolate the source files that store \"processes\" and the content files that stores \"results\".</p> </li> <li> <p>Q: Why <code>Contents</code> has no subspace directories?</p> <p>The previous answer has explained the different purposes of <code>Contents</code> and <code>SourceFiles</code>. Although the <code>Contents</code> structure should be as flat as possible. But in order to avoid duplicate names, Subspace Prefixes are used. <code>SourceFiles</code>, on the other hand, sets up Subspace Directories for ease of finding.</p> </li> <li> <p>Q: Why does the Omoospace.yml field not using PascalCase style?</p> <p>Because the official tool is written by shell. The field style should be snake_case.</p> </li> </ul>"},{"location":"roadmap/","title":"To Do","text":"<ul> <li>Moving subspace and all its files from space structure tree node to another node.</li> <li>A more interactive and visual interface for managing omoospace.</li> </ul>"},{"location":"apis/directory/","title":"Directory","text":""},{"location":"apis/directory/#omoospace.directory.DirectoryTree","title":"<code>DirectoryTree</code>","text":"<p>             Bases: <code>Tree</code></p> Source code in <code>omoospace\\directory.py</code> <pre><code>class DirectoryTree(Tree):\n\n    def __init__(self, structure: Structure = None, search_dir: PathLike = None):\n        self.root_path = None\n        super().__init__()\n        if structure:\n            self.from_structure(structure)\n        if search_dir:\n            self.from_dir(search_dir)\n\n    def from_structure(\n        self,\n        structure: Structure,\n        parent_dir: PathLike = None\n    ):\n        if parent_dir:\n            node = self.add_dir(parent_dir)\n        else:\n            node = self\n        self.__from_structure(node, structure)\n\n    def from_dir(\n        self,\n        search_dir: PathLike,\n        recursive: bool = True\n    ):\n        self.root_path = Path(search_dir).resolve()\n        directories = self.get_dirs(search_dir, recursive=recursive)\n        for directory in directories:\n            self.add_dir(directory)\n\n    def add_dir(self, dir: PathLike):\n        path = Path(dir).resolve()\n        if not path.is_dir():\n            raise InvalidError(path, 'directory')\n        if not self.root_path:\n            raise NotFoundError('root directory')\n        if self.root_path == path:\n            return self\n        if not is_subpath(path, self.root_path):\n            raise NotIncludeError(path, 'root directory')\n\n        relpath = path.relative_to(self.root_path)\n        directory_paths = [relpath, *list(relpath.parents)[:-1]]\n        directory_paths.reverse()\n        node = self\n        for directory_path in directory_paths:\n            node_path = \"/\"+str(directory_path.as_posix())\n            directory_node = self.find(\n                match=lambda node: node.path == node_path\n            )\n            if not directory_node:\n                is_subspace = self.is_subspace(\n                    Path(self.root_path, directory_path))\n                directory = Directory(\n                    path=directory_path,\n                    is_subspace=is_subspace\n                )\n                directory_node = node.add(directory)\n            node = directory_node\n        return node\n\n    @staticmethod\n    def is_subspace(path: Path) -&gt; bool:\n        \"\"\"Return true if path is a subspace entity .\n\n        Args:\n            path (Entity): The path to be checked.\n\n        Returns:\n            bool: Return ture if is valid entity.\n        \"\"\"\n        path = path.resolve()\n        is_subspace = Path(path, 'Subspace.yml').is_file()\n        is_void = 'Void' in path.name.split(\"_\")\n        return is_subspace or is_void\n\n    @classmethod\n    def get_dirs(\n        cls,\n        search_dir: PathLike,\n        recursive: bool = True\n    ) -&gt; list[Path]:\n        search_path: Path = Path(search_dir).resolve()\n        directories: list[Path] = []\n\n        if recursive:\n            # FIXME: replace this with Path.walk (python 3.12)\n            # https://docs.python.org/3/library/pathlib.html\n            for root, dirs, files in os.walk(search_path):\n                for dir in dirs:\n                    child = Path(root, dir).resolve()\n                    directories.append(child)\n        else:\n            for child in search_path.iterdir():\n                directories.append(child)\n        return directories\n\n    def make_dirs(self, root_dir: PathLike = None):\n        if not self.root_path and not root_dir:\n            raise NotFoundError('root directory')\n        self.__make_dirs(\n            path=Path(root_dir) or self.root_path,\n            node=self\n        )\n\n    @classmethod\n    def __make_dirs(\n        cls,\n        path: Path,\n        node: Union[Tree, Node],\n        is_subspace: bool = False\n    ):\n        if (isinstance(node, Node)):\n            dirpath = Path(path, node.path.removeprefix(\"/\")).resolve()\n            is_subspace = node.data.is_subspace\n        else:\n            dirpath = path.resolve()\n\n        dirpath.mkdir(parents=True, exist_ok=True)\n        if is_subspace:\n            with Path(dirpath, \"Subspace.yml\").open('w') as file:\n                pass\n\n        for sub_node in node:\n            cls.__make_dirs(path, node=sub_node)\n\n    def __from_structure(\n        self,\n        node: Union[Tree, Node],\n        structure: Structure,\n    ):\n        for key in structure.keys():\n            parent_path = node.path if isinstance(node, Node) else \".\"\n            directory_name = format_name(key)\n            directory_path = Path(parent_path, directory_name)\n            node_path = \"/\"+str(directory_path.as_posix())\n            directory_node = self.find(\n                match=lambda node: node.path == node_path\n            )\n            if not directory_node:\n                is_subspace = key[0] == \"*\" \\\n                    or \"Void\" in directory_name.split(\"_\")\n                directory = Directory(\n                    path=directory_path,\n                    is_subspace=is_subspace\n                )\n                directory_node = node.add(directory)\n            sub_structure = structure[key]\n            if sub_structure:\n                self.__from_structure(\n                    node=directory_node,\n                    structure=sub_structure,\n                )\n\n    def render_tree(self):\n        label_dict = {\n            \"\ud83d\udcc2\": \"ordinary direcotry\\nwhich is for file classification.\",\n            \"\ud83c\udfaf\": \"subspace direcotry\\nwhich is for presenting subspace.\",\n        }\n        return Grid(\n            self.format(repr=\"{node.data.ui_name}\", title=\"(Root)\"),\n            Instruction(label_dict)\n        )\n</code></pre>"},{"location":"apis/directory/#omoospace.directory.DirectoryTree.is_subspace","title":"<code>is_subspace(path)</code>  <code>staticmethod</code>","text":"<p>Return true if path is a subspace entity .</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Entity</code> <p>The path to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Return ture if is valid entity.</p> Source code in <code>omoospace\\directory.py</code> <pre><code>@staticmethod\ndef is_subspace(path: Path) -&gt; bool:\n    \"\"\"Return true if path is a subspace entity .\n\n    Args:\n        path (Entity): The path to be checked.\n\n    Returns:\n        bool: Return ture if is valid entity.\n    \"\"\"\n    path = path.resolve()\n    is_subspace = Path(path, 'Subspace.yml').is_file()\n    is_void = 'Void' in path.name.split(\"_\")\n    return is_subspace or is_void\n</code></pre>"},{"location":"apis/omoospace/","title":"Omoospace","text":""},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace","title":"<code>Omoospace</code>","text":"<p>The class of omoospace.</p> <p>An omoospace class instance is always refer to a existed omoospace directory, not in ideal. </p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Omoospace's name.</p> <code>description</code> <code>str</code> <p>Omoospace's description.</p> <code>creators</code> <code>list[Creator]</code> <p>Creator list.</p> <code>softwares</code> <code>list[Software]</code> <p>Software list.</p> <code>works</code> <code>list[Work]</code> <p>Work list.</p> <code>root_path</code> <code>Path</code> <p>Root path.</p> <code>sourcefiles_path</code> <code>Path</code> <p>SourceFiles directory path.</p> <code>contents_path</code> <code>Path</code> <p>Contents directory path.</p> <code>externaldata_path</code> <code>Path</code> <p>ExternalData directory path.</p> <code>stageddata_path</code> <code>Path</code> <p>StagedData directory path.</p> <code>references_path</code> <code>Path</code> <p>Reference directory path.</p> <code>profile_path</code> <code>Path</code> <p>Omoospace.yml file path.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>class Omoospace:\n    \"\"\"The class of omoospace.\n\n    An omoospace class instance is always refer to a existed omoospace directory, not in ideal. \n\n    Attributes:\n        name (str): Omoospace's name.\n        description (str): Omoospace's description.\n        creators (list[Creator]): Creator list.\n        softwares (list[Software]): Software list.\n        works (list[Work]): Work list.\n        root_path (Path): Root path.\n        sourcefiles_path (Path): SourceFiles directory path.\n        contents_path (Path): Contents directory path.\n        externaldata_path (Path): ExternalData directory path.\n        stageddata_path (Path): StagedData directory path.\n        references_path (Path): Reference directory path.\n        profile_path (Path): Omoospace.yml file path.\n    \"\"\"\n\n    name: str\n    description: str\n    creators: list[Creator]\n    softwares: list[Software]\n    works: list[Work]\n\n    def __init__(self, detect_dir: PathLike):\n        \"\"\"Initialize from existed omoospace directory.\n\n        Args:\n            detect_dir (PathLike): The start directory for detecting omoospace. It could be the subdirectories of omoospace.\n\n        Raises:\n            NotFoundError: No omoospace detected.\n        \"\"\"\n        detect_path = Path(detect_dir).resolve()\n        detect_path_parents = [detect_path, *detect_path.parents]\n        omoospace_path = None\n        for detect_path_parent in detect_path_parents:\n            omoospace_profile_path = Path(detect_path_parent, 'Omoospace.yml')\n            if omoospace_profile_path.exists():\n                omoospace_path = detect_path_parent\n                break\n        if not omoospace_path:\n            raise NotFoundError(\"omoospace\", detect_dir)\n\n        # path assignment\n        self.root_path = omoospace_path\n        self.sourcefiles_path = Path(self.root_path, 'SourceFiles').resolve()\n        self.contents_path = Path(self.root_path, 'Contents').resolve()\n        self.externaldata_path = Path(self.root_path, 'ExternalData').resolve()\n        self.stageddata_path = Path(self.root_path, 'StagedData').resolve()\n        self.references_path = Path(self.root_path, 'References').resolve()\n        self.profile_path = Path(self.root_path, \"Omoospace.yml\").resolve()\n\n    def __read_profile(self) -&gt; OmoospaceProfile:\n        with self.profile_path.open('r', encoding='utf-8') as file:\n            # aviod empty or invalid ifle\n            profile = yaml.load(file) or {}\n        return profile\n\n    def __write_profile(self, profile: OmoospaceProfile):\n        with self.profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(profile, file)\n\n    def __getattr__(self, name):\n        if name in OmoospaceProfile.__annotations__.keys():\n            profile = self.__read_profile()\n            # FIXME: list attribute is not None but empty list.\n            # may have better solution.\n            if name[-1] == \"s\":\n                return profile.get(name) or []\n            else:\n                return profile.get(name)\n\n        return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        if name in OmoospaceProfile.__annotations__.keys():\n            profile = self.__read_profile()\n            profile[name] = value\n            self.__write_profile(profile)\n        object.__setattr__(self, name, value)\n\n    def is_omoospace_item(self, path: PathLike) -&gt; bool:\n        path = Path(path).resolve()\n        in_omoospace = is_subpath(path, self.root_path)\n        not_in_stagedata = not is_subpath(path, self.stageddata_path)\n        not_stagedata = path != self.stageddata_path\n        return is_item(path) \\\n            and in_omoospace \\\n            and not_in_stagedata \\\n            and not_stagedata\n\n    @property\n    def subspace_entities(self) -&gt; list[Entity]:\n        \"\"\"list[Entity]: the subspace entities in the sourcefiles directory.\"\"\"\n        return SubspaceTree.get_entities(search_dir=self.sourcefiles_path)\n\n    @property\n    def subspace_tree(self) -&gt; SubspaceTree:\n        \"\"\"SubspaceTree: The subspace tree.\"\"\"\n        return SubspaceTree(search_dir=self.sourcefiles_path)\n\n    @property\n    def directory_tree(self,) -&gt; DirectoryTree:\n        \"\"\"DirectoryTree: The directory tree.\"\"\"\n        return DirectoryTree(search_dir=self.root_path)\n\n    @property\n    def imported_packages(self) -&gt; list[Package]:\n        \"\"\"list[Package]: The list of Package objects that are imported from ExternalData.\"\"\"\n        subdirs = [subdir for subdir in self.externaldata_path.iterdir()\n                   if subdir.is_dir()]\n\n        # Collect all Packages in ExternalData\n        packages = []\n        for subdir in subdirs:\n            profile_filepath = Path(subdir, 'Package.yml').resolve()\n            if profile_filepath.is_file():\n                packages.append(Package(subdir))\n\n        return packages\n\n    def set_subspace(\n            self,\n            subspace: Union[SubspaceProfile, str],\n            parent_dir: PathLike = None,\n            reveal_when_success: bool = True,\n            collect_entities: bool = True\n    ) -&gt; Path:\n        \"\"\"Add or update subspace to this omoospace.\n\n        Args:\n            subspace (Union[SubspaceProfile, str]): [description]\n            parent_dir (PathLike, optional): [description]. Defaults to None.\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n            collect_entities (bool, optional): [description]. Defaults to True.\n\n        Raises:\n            ExistsError: [description]\n            NotIncludeError: [description]\n            EmptyError: [description]\n            EmptyError: [description]\n            EmptyError: [description]\n            MoveFailed: [description]\n\n        Returns:\n            Path: [description]\n        \"\"\"\n\n        parent_path = Path(parent_dir).resolve(\n        ) if parent_dir else self.sourcefiles_path\n\n        # Check if is valid directory\n        if not parent_path.is_dir():\n            raise ExistsError(parent_dir)\n\n        # Check if is in SourceFiles\n        if not is_subpath(parent_path, self.sourcefiles_path, or_equal=True):\n            raise NotIncludeError(parent_dir, \"SourceFiles\")\n        # FIXME: using SubspaceProfile need more code base on typing.\n        # do it later.\n        if isinstance(subspace, dict):\n            # Check if name is empty\n            if not subspace.get(\"name\"):\n                raise EmptyError(\"name\")\n            if not len(subspace.get(\"name\")) &gt; 0:\n                raise EmptyError(\"name\")\n            subspace_profile = subspace\n            subspace_pathname = format_name(subspace.get(\"name\"))\n        else:\n            if not len(subspace) &gt; 0:\n                raise EmptyError(\"name\")\n\n            subspace_profile = {\n                \"name\": subspace,\n                \"comments\": None\n            }\n            subspace_pathname = format_name(subspace)\n\n        subspace_path = Path(parent_path, subspace_pathname).resolve()\n\n        # make subspace dir\n        subspace_path.mkdir(parents=True, exist_ok=True)\n        subspace_profile_path = Path(subspace_path, 'Subspace.yml')\n        with subspace_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(subspace_profile, file)\n\n        if (collect_entities):\n            try:\n                entities = SubspaceTree.get_entities(\n                    parent_path, recursive=False)\n\n                def is_match(entity: Entity):\n                    entity_stem = entity.stem\n                    not_itself = entity_stem != subspace_pathname\n\n                    is_match = False\n                    entity_namespaces = format_name(entity_stem).split('_')\n                    subspace_namespaces = subspace_pathname.split('_')\n                    for i in range(len(subspace_namespaces)):\n                        subspace_suffix = '_'.join(subspace_namespaces[i:])\n                        entity_prefix = '_'.join(\n                            entity_namespaces[:len(subspace_namespaces) - i])\n                        if subspace_suffix == entity_prefix:\n                            is_match = True\n                            break\n                    return not_itself and is_match\n\n                # Remove entity that not match the name\n                entities = list(filter(is_match, entities))\n\n                for entity in entities:\n                    shutil.move(entity, Path(\n                        subspace_path, entity.name).resolve())\n            except:\n                raise MoveFailed('entities')\n\n        if reveal_when_success:\n            reveal_in_explorer(subspace_path)\n\n        return subspace_path\n\n    def set_process(\n            self,\n            process: Union[Structure, list[str], str],\n            parent_dir: PathLike = None,\n            reveal_when_success: bool = True\n    ) -&gt; Path:\n        \"\"\"Add or update process to this omoospace.\n\n        Args:\n            process (Union[Structure, list[str], str]): [description]\n            parent_dir (PathLike, optional): [description]. Defaults to None.\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n\n        Raises:\n            ExistsError: [description]\n            NotIncludeError: [description]\n            CreateFailed: [description]\n\n        Returns:\n            Path: [description]\n        \"\"\"\n        parent_path = Path(parent_dir).resolve(\n        ) if parent_dir else self.sourcefiles_path\n\n        # Check if is valid directory\n        if not parent_path.is_dir():\n            raise ExistsError(parent_dir)\n\n        # Check if is in SourceFiles\n        if not is_subpath(parent_path, self.sourcefiles_path, or_equal=True):\n            raise NotIncludeError(parent_dir, \"SourceFiles\")\n\n        if isinstance(process, str):\n            process = [process]\n\n        if isinstance(process, list):\n            process_structure = {}\n            for p in process:\n                process_structure[p] = None\n        else:\n            process_structure = process\n\n        try:\n            DirectoryTree(process_structure).make_dirs(parent_path)\n        except Exception as err:\n            raise CreateFailed(\"process directories\")\n\n        if reveal_when_success:\n            reveal_in_explorer(parent_path)\n\n    def set_creator(self, creator: Creator):\n        \"\"\"Add or update creator to this omoospace.\n\n        Args:\n            creator (Creator): [description]\n        \"\"\"\n        creators = self.creators or []\n        self.creators = replace_or_append(creators, creator, 'email')\n\n    def set_software(self, software: Software):\n        \"\"\"Add or update software to this omoospace.\n\n        Args:\n            software (Software): [description]\n        \"\"\"\n        softwares = self.softwares or []\n        self.softwares = replace_or_append(softwares, software, 'name')\n\n    def set_work(self, work: Work):\n        \"\"\"Add or update work to this omoospace.\n\n        Args:\n            work (Work): [description]\n\n        Raises:\n            NotFoundError: [description]\n            NotFoundError: [description]\n        \"\"\"\n        if \"paths\" not in work.keys():\n            raise NotFoundError(\"paths\", work)\n\n        paths = [Path(path).resolve() for path in work[\"paths\"]]\n        paths = [path for path in paths\n                 if path.exists() and is_subpath(path, self.contents_path)]\n\n        if len(paths) == 0:\n            raise NotFoundError(\"valid paths\", work)\n\n        relpaths = [path.relative_to(self.contents_path) for path in paths]\n\n        work = {\n            \"name\": work.get(\"name\") or relpaths[0].stem,\n            \"paths\": [str(relpath.as_posix())for relpath in relpaths]\n        }\n        works = self.works or []\n        self.works = replace_or_append(works, work, 'name')\n\n    def export_package(\n        self,\n        items: list[PathLike],\n        name: str = None,\n        export_dir: PathLike = None,\n        profile: PackageProfile = None,\n        reveal_when_success: bool = True,\n        overwrite_existing: bool = True\n    ) -&gt; Package:\n        \"\"\"Export a package.\n\n        Args:\n            items (list[PathLike]): [description]\n            name (str, optional): [description]. Defaults to None.\n            export_dir (PathLike, optional): [description]. Defaults to None.\n            profile (PackageProfile, optional): [description]. Defaults to None.\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n            overwrite_existing (bool, optional): [description]. Defaults to True.\n\n        Raises:\n            ExistsError: [description]\n            Exception: [description]\n            Exception: [description]\n\n        Returns:\n            Package: [description]\n        \"\"\"\n        # validate items\n        items: list[Item] = [Path(item).resolve() for item in items]\n        items = list(filter(self.is_omoospace_item, items))\n\n        # Check if is enouph items\n        if (len(items) == 0):\n            raise Exception('Export Failed, at least one item')\n\n        name = name or self.name\n        export_path = Path(export_dir).resolve() if export_dir \\\n            else Path(self.root_path, 'StagedData', 'Packages').resolve()\n        package_dirname = format_name(name)\n        package_path = Path(export_path, package_dirname).resolve()\n\n        # Check if package dir exists\n        if (package_path.is_dir()):\n            if (overwrite_existing):\n                shutil.rmtree(package_path, ignore_errors=True)\n            else:\n                raise ExistsError('package', package_path)\n\n        profile = profile or {}\n        package_profile = {\n            \"name\": profile.get(\"name\") or name,\n            \"version\": profile.get(\"version\"),\n            \"description\": profile.get(\"description\"),\n            \"creators\": self.creators,\n        }\n\n        try:\n            package_path.mkdir(parents=True, exist_ok=True)\n            package_profile_path = Path(package_path, 'Package.yml')\n            package_md_path = Path(package_path, 'README.md')\n\n            with package_profile_path.open('w', encoding='utf-8') as file:\n                yaml.dump(package_profile, file)\n\n            with package_md_path.open('w', encoding='utf-8') as file:\n                file.write('# %s\\n' % package_profile.get(\"name\"))\n                file.write(\"%s\\n\" % package_profile.get(\"description\") or \"\")\n                file.write('## Package Info\\n')\n                file.write('**version:** %s  \\n' %\n                           package_profile.get(\"version\") or \"\")\n                file.write('**creators:**\\n')\n                for author in package_profile.get(\"creators\") or []:\n                    file.write(\"- %s\\n\" % author.get(\"name\") or \"Unknow\")\n                file.write('## Items List\\n')\n                for item in items:\n                    file.write(\"- %s\\n\" % item)\n\n            for i in track(range(len(items)), description=\"Processing...\"):\n                item = items[i]\n                item_relpath = item.relative_to(self.root_path)\n                copy_to_path(item, Path(package_path, item_relpath))\n\n        except Exception as err:\n            # Delete all if failed.\n            shutil.rmtree(package_path, ignore_errors=True)\n            raise Exception(\"Fail to export Package\", err)\n\n        if reveal_when_success:\n            reveal_in_explorer(package_path)\n\n        return Package(package_path)\n\n    def import_package(\n        self,\n        import_dir: PathLike,\n        reveal_when_success: bool = True,\n        overwrite_existing: bool = True\n    ):\n        \"\"\"Imports the package into the ExternalData directory.\n\n        Args:\n            import_dir (PathLike): [description]\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n            overwrite_existing (bool, optional): [description]. Defaults to True.\n\n        Raises:\n            ExistsError: [description]\n        \"\"\"\n        # get package form import directory\n        import_path = Path(import_dir).resolve()\n        package = Package(import_path)\n\n        # check if destination directory exists\n        package_path = Path(\n            self.root_path, 'ExternalData', format_name(package.name))\n        if (package_path.is_dir()):\n            if (overwrite_existing):\n                shutil.rmtree(package_path, ignore_errors=True)\n            else:\n                raise ExistsError('package', package_path)\n\n        if (import_path.suffix == \".zip\"):\n            with ZipFile(import_path, 'r') as zip:\n                zip.extractall(package_path)\n        else:\n            copy_to_path(import_path, package_path)\n\n        if reveal_when_success:\n            reveal_in_explorer(package_path)\n\n    def show_summary(\n        self,\n        output_dir: PathLike = None,\n        reveal_when_success: bool = True,\n    ):\n        \"\"\"Print a summary of the omoospace.\n\n        Args:\n            output_dir (PathLike, optional): [description]. Defaults to None.\n        \"\"\"\n        imported_packages = self.imported_packages\n        subspace_tree = self.subspace_tree\n\n        ui_creators = ItemList([\n            \"%s [dim]%s[/dim]\" % (creator.get(\"name\"), creator.get(\"role\"))\n            for creator in self.creators])\n        ui_softwares = ItemList([\n            \"%s [dim]%s[/dim]\" % (software.get(\"name\"),\n                                  software.get(\"version\"))\n            for software in self.softwares])\n\n        ui_works = Table(\n            \"Name\",\n            \"Paths\"\n        )\n\n        for work in self.works:\n            ui_works.add_row(\n                work.get(\"name\"),\n                \"\\n\".join(work.get(\"paths\") or [])\n            )\n\n        console.print(Board(\n            Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n                 (self.name, self.root_path)),\n            Info(\"Description\", self.description),\n            Info(\"Creators\", ui_creators),\n            Info(\"Softwares\", ui_softwares),\n            Info(\"Works\", ui_works),\n            Info(\"Subspace Tree\", subspace_tree.render_tree()),\n            Info(\"Subspace Entities\", subspace_tree.render_table()),\n            title=\"Summary\"\n        ))\n\n        if (output_dir):\n            subspace_tree.draw_graph(output_dir, reveal_when_success)\n\n    def show_profile(self):\n        \"\"\"Show profile of this omoospace.\n        \"\"\"\n        ui_creators = ItemList([\n            \"%s [dim]%s[/dim]\" % (creator.get(\"name\"), creator.get(\"role\"))\n            for creator in self.creators])\n        ui_softwares = ItemList([\n            \"%s [dim]%s[/dim]\" % (software.get(\"name\"),\n                                  software.get(\"version\"))\n            for software in self.softwares])\n        ui_works = Table(\n            \"Name\",\n            \"Paths\"\n        )\n        # TODO: add [link] to path\n        for work in self.works:\n            ui_works.add_row(\n                work.get(\"name\"),\n                \"\\n\".join(work.get(\"paths\") or [])\n            )\n        console.print(Board(\n            Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n                 (self.name, self.root_path)),\n            Info(\"Description\", self.description),\n            Info(\"Creators\", ui_creators),\n            Info(\"Softwares\", ui_softwares),\n            Info(\"Works\", ui_works),\n            title=\"Info\"\n        ))\n\n    def show_subspace_tree(self):\n        \"\"\"Shows the subspace tree.\n        \"\"\"\n        subspace_tree = self.subspace_tree\n        console.print(Board(\n            subspace_tree.render_tree(),\n            title=\"Subspace Tree\"\n        ))\n\n    def show_directory_tree(self):\n        \"\"\"Shows the directory tree.\n        \"\"\"\n        directory_tree = self.directory_tree\n        console.print(Board(\n            directory_tree.render_tree(),\n            title=\"Directory Tree\"\n        ))\n\n    def show_imported_packages(self):\n        \"\"\"Show imported packages.\n        \"\"\"\n        imported_packages = self.imported_packages\n        ui_imported_packages = Table(\n            \"Directory\", \"Description\",\n            rows=[[package.name, package.description]\n                  for package in imported_packages]\n        )\n        console.print(Board(\n            ui_imported_packages,\n            title=\"Imported Packages\"\n        ))\n\n    def show_subspace_entities(self):\n        \"\"\"Shows the subspace entities.\n        \"\"\"\n        subspace_tree = self.subspace_tree\n        console.print(Board(\n            subspace_tree.render_table(),\n            title=\"Subspace Entities\"\n        ))\n\n    @classmethod\n    def create(\n        cls,\n        name: str,\n        create_dir: PathLike = '.',\n        profile: OmoospaceProfile = None,\n        structure: Structure = None,\n        reveal_when_success: bool = True\n    ) -&gt; \"Omoospace\":\n        \"\"\"Create a Omoospace .\n\n        Args:\n            name (str): [description]\n            create_dir (PathLike, optional): [description]. Defaults to '.'.\n            profile (OmoospaceProfile, optional): [description]. Defaults to None.\n            structure (OmoospaceStructure, optional): [description]. Defaults to None.\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n\n        Raises:\n            ExistsError: [description]\n            Exception: [description]\n\n        Returns:\n            Omoospace: [description]\n        \"\"\"\n        omoospace_dirname = format_name(name)\n        omoospace_path = Path(create_dir, omoospace_dirname).resolve()\n\n        # Check if omoospace exists\n        if (omoospace_path.is_dir()):\n            raise ExistsError('omoospace', create_dir)\n\n        # write omoospace profile to yml\n        profile = profile or {}\n        omoospace_profile: OmoospaceProfile = {\n            \"name\": profile.get(\"name\") or name,  # can be any name style\n            \"description\": profile.get(\"description\"),\n            \"creators\": profile.get(\"creators\"),\n            \"softwares\": profile.get(\"softwares\"),\n            \"works\": profile.get(\"works\"),\n        }\n\n        try:\n            # create dirs\n            OmoospaceTree(structure).make_dirs(omoospace_path)\n            omoospace_profile_path = Path(\n                omoospace_path, 'Omoospace.yml').resolve()\n            with omoospace_profile_path.open('w', encoding='utf-8') as file:\n                yaml.dump(omoospace_profile, file)\n        except Exception as err:\n            shutil.rmtree(omoospace_path, ignore_errors=True)\n            raise CreateFailed(\"omoospace directories\")\n\n        if reveal_when_success:\n            reveal_in_explorer(omoospace_path)\n\n        return cls(omoospace_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.directory_tree","title":"<code>directory_tree: DirectoryTree</code>  <code>property</code>","text":"<p>DirectoryTree: The directory tree.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.imported_packages","title":"<code>imported_packages: list[Package]</code>  <code>property</code>","text":"<p>list[Package]: The list of Package objects that are imported from ExternalData.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.subspace_entities","title":"<code>subspace_entities: list[Entity]</code>  <code>property</code>","text":"<p>list[Entity]: the subspace entities in the sourcefiles directory.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.subspace_tree","title":"<code>subspace_tree: SubspaceTree</code>  <code>property</code>","text":"<p>SubspaceTree: The subspace tree.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.__init__","title":"<code>__init__(detect_dir)</code>","text":"<p>Initialize from existed omoospace directory.</p> <p>Parameters:</p> Name Type Description Default <code>detect_dir</code> <code>PathLike</code> <p>The start directory for detecting omoospace. It could be the subdirectories of omoospace.</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>No omoospace detected.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def __init__(self, detect_dir: PathLike):\n    \"\"\"Initialize from existed omoospace directory.\n\n    Args:\n        detect_dir (PathLike): The start directory for detecting omoospace. It could be the subdirectories of omoospace.\n\n    Raises:\n        NotFoundError: No omoospace detected.\n    \"\"\"\n    detect_path = Path(detect_dir).resolve()\n    detect_path_parents = [detect_path, *detect_path.parents]\n    omoospace_path = None\n    for detect_path_parent in detect_path_parents:\n        omoospace_profile_path = Path(detect_path_parent, 'Omoospace.yml')\n        if omoospace_profile_path.exists():\n            omoospace_path = detect_path_parent\n            break\n    if not omoospace_path:\n        raise NotFoundError(\"omoospace\", detect_dir)\n\n    # path assignment\n    self.root_path = omoospace_path\n    self.sourcefiles_path = Path(self.root_path, 'SourceFiles').resolve()\n    self.contents_path = Path(self.root_path, 'Contents').resolve()\n    self.externaldata_path = Path(self.root_path, 'ExternalData').resolve()\n    self.stageddata_path = Path(self.root_path, 'StagedData').resolve()\n    self.references_path = Path(self.root_path, 'References').resolve()\n    self.profile_path = Path(self.root_path, \"Omoospace.yml\").resolve()\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.create","title":"<code>create(name, create_dir='.', profile=None, structure=None, reveal_when_success=True)</code>  <code>classmethod</code>","text":"<p>Create a Omoospace .</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>[description]</p> required <code>create_dir</code> <code>PathLike</code> <p>[description]. Defaults to '.'.</p> <code>'.'</code> <code>profile</code> <code>OmoospaceProfile</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>structure</code> <code>OmoospaceStructure</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>[description]</p> <code>Exception</code> <p>[description]</p> <p>Returns:</p> Name Type Description <code>Omoospace</code> <code>Omoospace</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    name: str,\n    create_dir: PathLike = '.',\n    profile: OmoospaceProfile = None,\n    structure: Structure = None,\n    reveal_when_success: bool = True\n) -&gt; \"Omoospace\":\n    \"\"\"Create a Omoospace .\n\n    Args:\n        name (str): [description]\n        create_dir (PathLike, optional): [description]. Defaults to '.'.\n        profile (OmoospaceProfile, optional): [description]. Defaults to None.\n        structure (OmoospaceStructure, optional): [description]. Defaults to None.\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n\n    Raises:\n        ExistsError: [description]\n        Exception: [description]\n\n    Returns:\n        Omoospace: [description]\n    \"\"\"\n    omoospace_dirname = format_name(name)\n    omoospace_path = Path(create_dir, omoospace_dirname).resolve()\n\n    # Check if omoospace exists\n    if (omoospace_path.is_dir()):\n        raise ExistsError('omoospace', create_dir)\n\n    # write omoospace profile to yml\n    profile = profile or {}\n    omoospace_profile: OmoospaceProfile = {\n        \"name\": profile.get(\"name\") or name,  # can be any name style\n        \"description\": profile.get(\"description\"),\n        \"creators\": profile.get(\"creators\"),\n        \"softwares\": profile.get(\"softwares\"),\n        \"works\": profile.get(\"works\"),\n    }\n\n    try:\n        # create dirs\n        OmoospaceTree(structure).make_dirs(omoospace_path)\n        omoospace_profile_path = Path(\n            omoospace_path, 'Omoospace.yml').resolve()\n        with omoospace_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(omoospace_profile, file)\n    except Exception as err:\n        shutil.rmtree(omoospace_path, ignore_errors=True)\n        raise CreateFailed(\"omoospace directories\")\n\n    if reveal_when_success:\n        reveal_in_explorer(omoospace_path)\n\n    return cls(omoospace_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.export_package","title":"<code>export_package(items, name=None, export_dir=None, profile=None, reveal_when_success=True, overwrite_existing=True)</code>","text":"<p>Export a package.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[PathLike]</code> <p>[description]</p> required <code>name</code> <code>str</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>export_dir</code> <code>PathLike</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>profile</code> <code>PackageProfile</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <code>overwrite_existing</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>[description]</p> <code>Exception</code> <p>[description]</p> <code>Exception</code> <p>[description]</p> <p>Returns:</p> Name Type Description <code>Package</code> <code>Package</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def export_package(\n    self,\n    items: list[PathLike],\n    name: str = None,\n    export_dir: PathLike = None,\n    profile: PackageProfile = None,\n    reveal_when_success: bool = True,\n    overwrite_existing: bool = True\n) -&gt; Package:\n    \"\"\"Export a package.\n\n    Args:\n        items (list[PathLike]): [description]\n        name (str, optional): [description]. Defaults to None.\n        export_dir (PathLike, optional): [description]. Defaults to None.\n        profile (PackageProfile, optional): [description]. Defaults to None.\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n        overwrite_existing (bool, optional): [description]. Defaults to True.\n\n    Raises:\n        ExistsError: [description]\n        Exception: [description]\n        Exception: [description]\n\n    Returns:\n        Package: [description]\n    \"\"\"\n    # validate items\n    items: list[Item] = [Path(item).resolve() for item in items]\n    items = list(filter(self.is_omoospace_item, items))\n\n    # Check if is enouph items\n    if (len(items) == 0):\n        raise Exception('Export Failed, at least one item')\n\n    name = name or self.name\n    export_path = Path(export_dir).resolve() if export_dir \\\n        else Path(self.root_path, 'StagedData', 'Packages').resolve()\n    package_dirname = format_name(name)\n    package_path = Path(export_path, package_dirname).resolve()\n\n    # Check if package dir exists\n    if (package_path.is_dir()):\n        if (overwrite_existing):\n            shutil.rmtree(package_path, ignore_errors=True)\n        else:\n            raise ExistsError('package', package_path)\n\n    profile = profile or {}\n    package_profile = {\n        \"name\": profile.get(\"name\") or name,\n        \"version\": profile.get(\"version\"),\n        \"description\": profile.get(\"description\"),\n        \"creators\": self.creators,\n    }\n\n    try:\n        package_path.mkdir(parents=True, exist_ok=True)\n        package_profile_path = Path(package_path, 'Package.yml')\n        package_md_path = Path(package_path, 'README.md')\n\n        with package_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(package_profile, file)\n\n        with package_md_path.open('w', encoding='utf-8') as file:\n            file.write('# %s\\n' % package_profile.get(\"name\"))\n            file.write(\"%s\\n\" % package_profile.get(\"description\") or \"\")\n            file.write('## Package Info\\n')\n            file.write('**version:** %s  \\n' %\n                       package_profile.get(\"version\") or \"\")\n            file.write('**creators:**\\n')\n            for author in package_profile.get(\"creators\") or []:\n                file.write(\"- %s\\n\" % author.get(\"name\") or \"Unknow\")\n            file.write('## Items List\\n')\n            for item in items:\n                file.write(\"- %s\\n\" % item)\n\n        for i in track(range(len(items)), description=\"Processing...\"):\n            item = items[i]\n            item_relpath = item.relative_to(self.root_path)\n            copy_to_path(item, Path(package_path, item_relpath))\n\n    except Exception as err:\n        # Delete all if failed.\n        shutil.rmtree(package_path, ignore_errors=True)\n        raise Exception(\"Fail to export Package\", err)\n\n    if reveal_when_success:\n        reveal_in_explorer(package_path)\n\n    return Package(package_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.import_package","title":"<code>import_package(import_dir, reveal_when_success=True, overwrite_existing=True)</code>","text":"<p>Imports the package into the ExternalData directory.</p> <p>Parameters:</p> Name Type Description Default <code>import_dir</code> <code>PathLike</code> <p>[description]</p> required <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <code>overwrite_existing</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def import_package(\n    self,\n    import_dir: PathLike,\n    reveal_when_success: bool = True,\n    overwrite_existing: bool = True\n):\n    \"\"\"Imports the package into the ExternalData directory.\n\n    Args:\n        import_dir (PathLike): [description]\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n        overwrite_existing (bool, optional): [description]. Defaults to True.\n\n    Raises:\n        ExistsError: [description]\n    \"\"\"\n    # get package form import directory\n    import_path = Path(import_dir).resolve()\n    package = Package(import_path)\n\n    # check if destination directory exists\n    package_path = Path(\n        self.root_path, 'ExternalData', format_name(package.name))\n    if (package_path.is_dir()):\n        if (overwrite_existing):\n            shutil.rmtree(package_path, ignore_errors=True)\n        else:\n            raise ExistsError('package', package_path)\n\n    if (import_path.suffix == \".zip\"):\n        with ZipFile(import_path, 'r') as zip:\n            zip.extractall(package_path)\n    else:\n        copy_to_path(import_path, package_path)\n\n    if reveal_when_success:\n        reveal_in_explorer(package_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.set_creator","title":"<code>set_creator(creator)</code>","text":"<p>Add or update creator to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>creator</code> <code>Creator</code> <p>[description]</p> required Source code in <code>omoospace\\omoospace.py</code> <pre><code>def set_creator(self, creator: Creator):\n    \"\"\"Add or update creator to this omoospace.\n\n    Args:\n        creator (Creator): [description]\n    \"\"\"\n    creators = self.creators or []\n    self.creators = replace_or_append(creators, creator, 'email')\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.set_process","title":"<code>set_process(process, parent_dir=None, reveal_when_success=True)</code>","text":"<p>Add or update process to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>Union[Structure, list[str], str]</code> <p>[description]</p> required <code>parent_dir</code> <code>PathLike</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>[description]</p> <code>NotIncludeError</code> <p>[description]</p> <code>CreateFailed</code> <p>[description]</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def set_process(\n        self,\n        process: Union[Structure, list[str], str],\n        parent_dir: PathLike = None,\n        reveal_when_success: bool = True\n) -&gt; Path:\n    \"\"\"Add or update process to this omoospace.\n\n    Args:\n        process (Union[Structure, list[str], str]): [description]\n        parent_dir (PathLike, optional): [description]. Defaults to None.\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n\n    Raises:\n        ExistsError: [description]\n        NotIncludeError: [description]\n        CreateFailed: [description]\n\n    Returns:\n        Path: [description]\n    \"\"\"\n    parent_path = Path(parent_dir).resolve(\n    ) if parent_dir else self.sourcefiles_path\n\n    # Check if is valid directory\n    if not parent_path.is_dir():\n        raise ExistsError(parent_dir)\n\n    # Check if is in SourceFiles\n    if not is_subpath(parent_path, self.sourcefiles_path, or_equal=True):\n        raise NotIncludeError(parent_dir, \"SourceFiles\")\n\n    if isinstance(process, str):\n        process = [process]\n\n    if isinstance(process, list):\n        process_structure = {}\n        for p in process:\n            process_structure[p] = None\n    else:\n        process_structure = process\n\n    try:\n        DirectoryTree(process_structure).make_dirs(parent_path)\n    except Exception as err:\n        raise CreateFailed(\"process directories\")\n\n    if reveal_when_success:\n        reveal_in_explorer(parent_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.set_software","title":"<code>set_software(software)</code>","text":"<p>Add or update software to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>software</code> <code>Software</code> <p>[description]</p> required Source code in <code>omoospace\\omoospace.py</code> <pre><code>def set_software(self, software: Software):\n    \"\"\"Add or update software to this omoospace.\n\n    Args:\n        software (Software): [description]\n    \"\"\"\n    softwares = self.softwares or []\n    self.softwares = replace_or_append(softwares, software, 'name')\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.set_subspace","title":"<code>set_subspace(subspace, parent_dir=None, reveal_when_success=True, collect_entities=True)</code>","text":"<p>Add or update subspace to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>subspace</code> <code>Union[SubspaceProfile, str]</code> <p>[description]</p> required <code>parent_dir</code> <code>PathLike</code> <p>[description]. Defaults to None.</p> <code>None</code> <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <code>collect_entities</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>[description]</p> <code>NotIncludeError</code> <p>[description]</p> <code>EmptyError</code> <p>[description]</p> <code>EmptyError</code> <p>[description]</p> <code>EmptyError</code> <p>[description]</p> <code>MoveFailed</code> <p>[description]</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def set_subspace(\n        self,\n        subspace: Union[SubspaceProfile, str],\n        parent_dir: PathLike = None,\n        reveal_when_success: bool = True,\n        collect_entities: bool = True\n) -&gt; Path:\n    \"\"\"Add or update subspace to this omoospace.\n\n    Args:\n        subspace (Union[SubspaceProfile, str]): [description]\n        parent_dir (PathLike, optional): [description]. Defaults to None.\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n        collect_entities (bool, optional): [description]. Defaults to True.\n\n    Raises:\n        ExistsError: [description]\n        NotIncludeError: [description]\n        EmptyError: [description]\n        EmptyError: [description]\n        EmptyError: [description]\n        MoveFailed: [description]\n\n    Returns:\n        Path: [description]\n    \"\"\"\n\n    parent_path = Path(parent_dir).resolve(\n    ) if parent_dir else self.sourcefiles_path\n\n    # Check if is valid directory\n    if not parent_path.is_dir():\n        raise ExistsError(parent_dir)\n\n    # Check if is in SourceFiles\n    if not is_subpath(parent_path, self.sourcefiles_path, or_equal=True):\n        raise NotIncludeError(parent_dir, \"SourceFiles\")\n    # FIXME: using SubspaceProfile need more code base on typing.\n    # do it later.\n    if isinstance(subspace, dict):\n        # Check if name is empty\n        if not subspace.get(\"name\"):\n            raise EmptyError(\"name\")\n        if not len(subspace.get(\"name\")) &gt; 0:\n            raise EmptyError(\"name\")\n        subspace_profile = subspace\n        subspace_pathname = format_name(subspace.get(\"name\"))\n    else:\n        if not len(subspace) &gt; 0:\n            raise EmptyError(\"name\")\n\n        subspace_profile = {\n            \"name\": subspace,\n            \"comments\": None\n        }\n        subspace_pathname = format_name(subspace)\n\n    subspace_path = Path(parent_path, subspace_pathname).resolve()\n\n    # make subspace dir\n    subspace_path.mkdir(parents=True, exist_ok=True)\n    subspace_profile_path = Path(subspace_path, 'Subspace.yml')\n    with subspace_profile_path.open('w', encoding='utf-8') as file:\n        yaml.dump(subspace_profile, file)\n\n    if (collect_entities):\n        try:\n            entities = SubspaceTree.get_entities(\n                parent_path, recursive=False)\n\n            def is_match(entity: Entity):\n                entity_stem = entity.stem\n                not_itself = entity_stem != subspace_pathname\n\n                is_match = False\n                entity_namespaces = format_name(entity_stem).split('_')\n                subspace_namespaces = subspace_pathname.split('_')\n                for i in range(len(subspace_namespaces)):\n                    subspace_suffix = '_'.join(subspace_namespaces[i:])\n                    entity_prefix = '_'.join(\n                        entity_namespaces[:len(subspace_namespaces) - i])\n                    if subspace_suffix == entity_prefix:\n                        is_match = True\n                        break\n                return not_itself and is_match\n\n            # Remove entity that not match the name\n            entities = list(filter(is_match, entities))\n\n            for entity in entities:\n                shutil.move(entity, Path(\n                    subspace_path, entity.name).resolve())\n        except:\n            raise MoveFailed('entities')\n\n    if reveal_when_success:\n        reveal_in_explorer(subspace_path)\n\n    return subspace_path\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.set_work","title":"<code>set_work(work)</code>","text":"<p>Add or update work to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>work</code> <code>Work</code> <p>[description]</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>[description]</p> <code>NotFoundError</code> <p>[description]</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def set_work(self, work: Work):\n    \"\"\"Add or update work to this omoospace.\n\n    Args:\n        work (Work): [description]\n\n    Raises:\n        NotFoundError: [description]\n        NotFoundError: [description]\n    \"\"\"\n    if \"paths\" not in work.keys():\n        raise NotFoundError(\"paths\", work)\n\n    paths = [Path(path).resolve() for path in work[\"paths\"]]\n    paths = [path for path in paths\n             if path.exists() and is_subpath(path, self.contents_path)]\n\n    if len(paths) == 0:\n        raise NotFoundError(\"valid paths\", work)\n\n    relpaths = [path.relative_to(self.contents_path) for path in paths]\n\n    work = {\n        \"name\": work.get(\"name\") or relpaths[0].stem,\n        \"paths\": [str(relpath.as_posix())for relpath in relpaths]\n    }\n    works = self.works or []\n    self.works = replace_or_append(works, work, 'name')\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_directory_tree","title":"<code>show_directory_tree()</code>","text":"<p>Shows the directory tree.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_directory_tree(self):\n    \"\"\"Shows the directory tree.\n    \"\"\"\n    directory_tree = self.directory_tree\n    console.print(Board(\n        directory_tree.render_tree(),\n        title=\"Directory Tree\"\n    ))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_imported_packages","title":"<code>show_imported_packages()</code>","text":"<p>Show imported packages.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_imported_packages(self):\n    \"\"\"Show imported packages.\n    \"\"\"\n    imported_packages = self.imported_packages\n    ui_imported_packages = Table(\n        \"Directory\", \"Description\",\n        rows=[[package.name, package.description]\n              for package in imported_packages]\n    )\n    console.print(Board(\n        ui_imported_packages,\n        title=\"Imported Packages\"\n    ))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_profile","title":"<code>show_profile()</code>","text":"<p>Show profile of this omoospace.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_profile(self):\n    \"\"\"Show profile of this omoospace.\n    \"\"\"\n    ui_creators = ItemList([\n        \"%s [dim]%s[/dim]\" % (creator.get(\"name\"), creator.get(\"role\"))\n        for creator in self.creators])\n    ui_softwares = ItemList([\n        \"%s [dim]%s[/dim]\" % (software.get(\"name\"),\n                              software.get(\"version\"))\n        for software in self.softwares])\n    ui_works = Table(\n        \"Name\",\n        \"Paths\"\n    )\n    # TODO: add [link] to path\n    for work in self.works:\n        ui_works.add_row(\n            work.get(\"name\"),\n            \"\\n\".join(work.get(\"paths\") or [])\n        )\n    console.print(Board(\n        Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n             (self.name, self.root_path)),\n        Info(\"Description\", self.description),\n        Info(\"Creators\", ui_creators),\n        Info(\"Softwares\", ui_softwares),\n        Info(\"Works\", ui_works),\n        title=\"Info\"\n    ))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_subspace_entities","title":"<code>show_subspace_entities()</code>","text":"<p>Shows the subspace entities.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_subspace_entities(self):\n    \"\"\"Shows the subspace entities.\n    \"\"\"\n    subspace_tree = self.subspace_tree\n    console.print(Board(\n        subspace_tree.render_table(),\n        title=\"Subspace Entities\"\n    ))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_subspace_tree","title":"<code>show_subspace_tree()</code>","text":"<p>Shows the subspace tree.</p> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_subspace_tree(self):\n    \"\"\"Shows the subspace tree.\n    \"\"\"\n    subspace_tree = self.subspace_tree\n    console.print(Board(\n        subspace_tree.render_tree(),\n        title=\"Subspace Tree\"\n    ))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.show_summary","title":"<code>show_summary(output_dir=None, reveal_when_success=True)</code>","text":"<p>Print a summary of the omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>PathLike</code> <p>[description]. Defaults to None.</p> <code>None</code> Source code in <code>omoospace\\omoospace.py</code> <pre><code>def show_summary(\n    self,\n    output_dir: PathLike = None,\n    reveal_when_success: bool = True,\n):\n    \"\"\"Print a summary of the omoospace.\n\n    Args:\n        output_dir (PathLike, optional): [description]. Defaults to None.\n    \"\"\"\n    imported_packages = self.imported_packages\n    subspace_tree = self.subspace_tree\n\n    ui_creators = ItemList([\n        \"%s [dim]%s[/dim]\" % (creator.get(\"name\"), creator.get(\"role\"))\n        for creator in self.creators])\n    ui_softwares = ItemList([\n        \"%s [dim]%s[/dim]\" % (software.get(\"name\"),\n                              software.get(\"version\"))\n        for software in self.softwares])\n\n    ui_works = Table(\n        \"Name\",\n        \"Paths\"\n    )\n\n    for work in self.works:\n        ui_works.add_row(\n            work.get(\"name\"),\n            \"\\n\".join(work.get(\"paths\") or [])\n        )\n\n    console.print(Board(\n        Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n             (self.name, self.root_path)),\n        Info(\"Description\", self.description),\n        Info(\"Creators\", ui_creators),\n        Info(\"Softwares\", ui_softwares),\n        Info(\"Works\", ui_works),\n        Info(\"Subspace Tree\", subspace_tree.render_tree()),\n        Info(\"Subspace Entities\", subspace_tree.render_table()),\n        title=\"Summary\"\n    ))\n\n    if (output_dir):\n        subspace_tree.draw_graph(output_dir, reveal_when_success)\n</code></pre>"},{"location":"apis/package/","title":"Package","text":""},{"location":"apis/package/#omoospace.package.Package","title":"<code>Package</code>","text":"<p>The class of omoospace package.</p> <p>A package class instance is always refer to a existed package directory, not in ideal. </p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Package's name.</p> <code>description</code> <code>str</code> <p>Package's description.</p> <code>version</code> <code>str</code> <p>Package's version.</p> <code>creators</code> <code>list[Creator]</code> <p>Creator list.</p> <code>root_path</code> <code>Path</code> <p>Root path.</p> Source code in <code>omoospace\\package.py</code> <pre><code>class Package:\n    \"\"\"The class of omoospace package.\n\n    A package class instance is always refer to a existed package directory, not in ideal. \n\n    Attributes:\n        name (str): Package's name.\n        description (str): Package's description.\n        version (str): Package's version.\n        creators (list[Creator]): Creator list.\n        root_path (Path): Root path.\n    \"\"\"\n\n    def __init__(self, detect_dir: PathLike):\n        \"\"\"Initialize package .\n\n        Args:\n            detect_dir (PathLike): [description]\n\n        Raises:\n            NotFoundError: [description]\n            NotFoundError: [description]\n        \"\"\"\n        package_path = Path(detect_dir).resolve()\n        if (package_path.suffix == \".zip\"):\n            with ZipFile(package_path, 'r') as zip:\n                try:\n                    with zip.open('Package.yml') as file:\n                        package_profile = yaml.load(file)\n                except:\n                    raise NotFoundError(\"package\", detect_dir)\n        else:\n            package_profile_path = Path(package_path, 'Package.yml')\n            if package_profile_path.exists():\n                with package_profile_path.open('r', encoding='utf-8') as file:\n                    package_profile = yaml.load(file)\n            else:\n                raise NotFoundError(\"package\", detect_dir)\n\n        self.root_path = package_path\n        self.name = package_profile.get('name')\n        self.description = package_profile.get('description')\n        self.version = package_profile.get('version')\n        self.creators = package_profile.get('creators')\n\n    @property\n    def items(self) -&gt; list[Item]:\n        \"\"\"list[Item]: The list of Item objects.\"\"\"\n        items: list[Item] = []\n        for root, dirs, files in os.walk(self.root_path):\n            for path in files:\n                child = Path(root, path).resolve()\n                if is_item(child):\n                    items.append(child)\n        return items\n\n    def show_summary(self):\n        \"\"\"Print a summary of the package.\n        \"\"\"\n        items = [str(item.relative_to(self.root_path)) for item in self.items]\n        console.print(Board(\n            Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n                 (self.name, self.root_path)),\n            Info(\"Description\", self.description),\n            Info(\"Version\", self.version),\n            Info(\"Items\", \"\\n\".join(items)),\n            title=\"Summary\"\n        ))\n</code></pre>"},{"location":"apis/package/#omoospace.package.Package.items","title":"<code>items: list[Item]</code>  <code>property</code>","text":"<p>list[Item]: The list of Item objects.</p>"},{"location":"apis/package/#omoospace.package.Package.__init__","title":"<code>__init__(detect_dir)</code>","text":"<p>Initialize package .</p> <p>Parameters:</p> Name Type Description Default <code>detect_dir</code> <code>PathLike</code> <p>[description]</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>[description]</p> <code>NotFoundError</code> <p>[description]</p> Source code in <code>omoospace\\package.py</code> <pre><code>def __init__(self, detect_dir: PathLike):\n    \"\"\"Initialize package .\n\n    Args:\n        detect_dir (PathLike): [description]\n\n    Raises:\n        NotFoundError: [description]\n        NotFoundError: [description]\n    \"\"\"\n    package_path = Path(detect_dir).resolve()\n    if (package_path.suffix == \".zip\"):\n        with ZipFile(package_path, 'r') as zip:\n            try:\n                with zip.open('Package.yml') as file:\n                    package_profile = yaml.load(file)\n            except:\n                raise NotFoundError(\"package\", detect_dir)\n    else:\n        package_profile_path = Path(package_path, 'Package.yml')\n        if package_profile_path.exists():\n            with package_profile_path.open('r', encoding='utf-8') as file:\n                package_profile = yaml.load(file)\n        else:\n            raise NotFoundError(\"package\", detect_dir)\n\n    self.root_path = package_path\n    self.name = package_profile.get('name')\n    self.description = package_profile.get('description')\n    self.version = package_profile.get('version')\n    self.creators = package_profile.get('creators')\n</code></pre>"},{"location":"apis/package/#omoospace.package.Package.show_summary","title":"<code>show_summary()</code>","text":"<p>Print a summary of the package.</p> Source code in <code>omoospace\\package.py</code> <pre><code>def show_summary(self):\n    \"\"\"Print a summary of the package.\n    \"\"\"\n    items = [str(item.relative_to(self.root_path)) for item in self.items]\n    console.print(Board(\n        Info(\"Name\", \"%s [dim](%s)[/dim]\" %\n             (self.name, self.root_path)),\n        Info(\"Description\", self.description),\n        Info(\"Version\", self.version),\n        Info(\"Items\", \"\\n\".join(items)),\n        title=\"Summary\"\n    ))\n</code></pre>"},{"location":"apis/subspace/","title":"Subspace","text":""},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree","title":"<code>SubspaceTree</code>","text":"<p>             Bases: <code>Tree</code></p> <p>The class of subspace tree.</p> <p>An subspace tree instance is always refer to a existed SourceFiles directory, not in ideal.</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>class SubspaceTree(Tree):\n    \"\"\"The class of subspace tree.\n\n    An subspace tree instance is always refer to a existed SourceFiles directory, not in ideal. \n\n    \"\"\"\n\n    def __init__(\n        self,\n        search_dir: PathLike = None\n    ):\n        \"\"\"Initialize the subspace tree from the given directory.\n\n        Args:\n            search_dir (PathLike): [description]\n        \"\"\"\n        super().__init__()\n        if (search_dir):\n            self.from_dir(search_dir)\n\n    @classmethod\n    def get_entity_route(cls, path: PathLike) -&gt; Route:\n        \"\"\"Returns the route of entity path.\n\n        **This is a useful function to generate correct path of sourcefile output.**\n\n        For example:\n        ```python\n        filepath = \"c:/path/to/Project/SourceFiles/SQ010_SH0100.blend\"\n        route = SubspaceTree.get_entity_route(filepath)\n        &gt;&gt;&gt; [\"SQ010\",\"SH0100\"]\n        route_str = \"_\".join(route)\n        &gt;&gt;&gt; \"SQ010_SH0100\"\n        ```\n        So the render ouput filename should be `SQ010_SH0100.####.png`\n\n        Args:\n            path (PathLike): [description]\n\n        Returns:\n            Route: The list of pathname of subspace.\n        \"\"\"\n        subspace_tree = cls()\n        entity_end_node = subspace_tree.add_entity(path)\n        return entity_end_node.path.split(\"/\")[1:]\n\n    def from_dir(\n        self,\n        search_dir: PathLike,\n        recursive: bool = True\n    ):\n        \"\"\"Set the subspace tree from the given directory.\n\n        Args:\n            search_dir (PathLike): [description]\n            recursive (bool, optional): [description]. Defaults to True.\n        \"\"\"\n        entities = self.get_entities(search_dir, recursive=recursive)\n        for entity in entities:\n            self.add_entity(entity)\n\n    def add_entity(self, path: PathLike) -&gt; Node:\n        \"\"\"Add subspace node to the tree based on entity.\n\n        The entity path must be real, not in ideal.\n\n        Args:\n            path (PathLike): [description]\n\n        Returns:\n            Route: List of subspace name along the route.\n\n        Raises:\n            InvalidError: entity path is invalid.\n        \"\"\"\n        entity = Path(path).resolve()\n        if not is_entity(entity) == 0:\n            InvalidError(entity, 'entity')\n\n        # Get relpath parts. remove those directory that is not entity.\n        entities = [entity]\n        for parent in entity.parents:\n            if is_entity(parent):\n                entities.append(parent)\n        entities.reverse()\n\n        # Get route nodes. remove duplicate prefix.\n        def is_valid_name(namespace):\n            return not is_version(namespace) \\\n                and not is_number(namespace)\n\n        route: Route = []\n        node = self\n        for entity in entities:\n            entity_name: str = entity.stem\n\n            namespaces: list[str] = entity_name.split('_')\n            subspace_profile_path = Path(entity, \"Subspace.yml\").resolve()\n\n            # clip matched prefix spaces\n            for i in range(len(route)):\n                route_str_suffix = '_'.join(route[i:])\n                name_prefix = '_'.join(namespaces[:len(route) - i])\n                if route_str_suffix == name_prefix:\n                    namespaces = namespaces[len(route) - i:]\n                    break\n\n            namespaces = list(filter(is_valid_name, namespaces))\n\n            # create or get subspace by namespace\n            for i in range(len(namespaces)+1):\n                # if all namespace is match,the entity will be add to current route\n                # so the index is start from -1\n                i = i - 1\n                is_last = i == len(namespaces)-1\n                subspace_route = route + namespaces[:i+1]\n                if (len(subspace_route) == 0):\n                    continue\n\n                node_path = \"/\" + \"/\".join(subspace_route)\n                subspace_node = self.find(\n                    match=lambda node: node.path == node_path\n                )\n                if not subspace_node:\n                    if is_last and subspace_profile_path.is_file():\n                        with subspace_profile_path.open('r', encoding='utf-8') as file:\n                            subspace_profile = yaml.load(file) or {}\n                    else:\n                        subspace_profile = {}\n                    subspace = Subspace(\n                        pathname=namespaces[i],\n                        profile=subspace_profile,\n                    )\n                    subspace_node = node.add(subspace)\n\n                # if is last, add enitity to it.\n                if is_last and entity not in subspace_node.data.entities:\n                    subspace_node.data.entities.append(entity)\n\n                # assign type\n                subspace_type = subspace_node.data.type\n                if is_last and entity.is_dir():\n                    subspace_node.data.type = SubspaceType.DIRECTORY\n                elif subspace_type != SubspaceType.DIRECTORY \\\n                        and is_last and entity.is_file():\n                    subspace_node.data.type = SubspaceType.FILE\n                elif subspace_type != SubspaceType.DIRECTORY \\\n                        and subspace_type != SubspaceType.FILE\\\n                        and entity.exists():\n                    subspace_node.data.type = SubspaceType.PHANTOM\n\n                # what ever is end node or not, all nodes are passed through.\n                subspace_node.data.flow += 1\n\n                node = subspace_node\n            route.extend(namespaces)\n        return node\n\n    @classmethod\n    def get_entities(\n        cls,\n        search_dir: PathLike,\n        recursive: bool = True\n    ) -&gt; list[Entity]:\n        \"\"\"Recursively find all entities in the search directory .\n\n        Args:\n            search_dir (PathLike): [description]\n            recursive (bool, optional): [description]. Defaults to True.\n\n        Returns:\n            list[Entity]: [description]\n        \"\"\"\n        search_path: Path = Path(search_dir).resolve()\n        entities: list[Entity] = []\n        if recursive:\n            # FIXME: replace this with Path.walk (python 3.12)\n            # https://docs.python.org/3/library/pathlib.html\n            for root, dirs, files in os.walk(search_path):\n                for path in [*dirs, *files]:\n                    child = Path(root, path).resolve()\n                    if is_entity(child):\n                        entities.append(child)\n        else:\n            for child in search_path.iterdir():\n                if is_entity(child):\n                    entities.append(child)\n        return entities\n\n    def render_tree(self) -&gt; str:\n        \"\"\"Render the tree as rich str.\n\n        Returns:\n            str: [description]\n        \"\"\"\n\n        label_dict = {\n            \"\ud83d\udcc1\": \"direcotry subspace\\nwhich contains Subspace.yml.\",\n            \"\ud83d\udcc4\": \"file subspace\\nwhich refers to a leaf file.\",\n            \"\ud83d\udcbf\": \"phantom | unknown subspace\\nwhich has no entity.\",\n            \"\u26d4\": \"dummy subspace\\nwhich have not created yet.\"\n        }\n\n        return Grid(\n            self.format(repr=\"{node.data.ui_name}\", title=\"(Root)\"),\n            Instruction(label_dict)\n        )\n\n    def render_table(self) -&gt; str:\n        \"\"\"List subspaces in table as rich str.\n\n        Returns:\n            str: [description]\n        \"\"\"\n\n        table = Table(\n            \"Subspace\",\n            \"Comments\",\n            \"Entities\"\n        )\n\n        for node in self:\n            subspace: Subspace = node.data\n            table.add_row(\n                subspace.ui_name,\n                \"\\n\".join(subspace.ui_comments),\n                \"\\n\".join(subspace.ui_entities)\n            )\n        return table\n\n    def draw_graph(\n        self,\n        output_dir: PathLike,\n        reveal_when_success: bool = True\n    ):\n        \"\"\"Draws the graph and export html file.\n\n        Args:\n            output_dir (PathLike): [description]\n            reveal_when_success (bool, optional): [description]. Defaults to True.\n        \"\"\"\n        node_dict = {\n            \".\": {\n                \"name\": \"(Root)\",\n                \"content\": \"&amp;nbsp(Root)&amp;nbsp\",\n                \"color\": \"#BEBEBE\",\n                \"size\": len(self)+20,\n                \"level\": 0,\n                \"border_width\": 0,\n            }\n        }\n        for node in self:\n            subspace: Subspace = node.data\n            parent: Subspace = node.parent.data if node.parent else None\n\n            if (subspace.type == SubspaceType.PHANTOM):\n                color = \"#939393\"\n            elif (subspace.type == SubspaceType.DIRECTORY):\n                color = \"#F6B330\"\n            else:\n                color = \"#585858\"\n\n            node_dict[node.path] = {\n                \"name\": subspace.html_name,\n                \"parent\": node.parent.path if parent else \".\",\n                \"content\": \"&lt;br&gt;\".join(subspace.html_entities),\n                \"color\": color,\n                \"size\": 5+subspace.flow,\n                # \"level\": node.depth,\n                \"border_width\": 0,\n                \"edge_width\": 5+subspace.flow,\n                \"edge_color\": '#3F3F3F',\n            }\n\n        draw_graph(\n            node_dict,\n            bgcolor=\"#111112\",\n            font_color=\"#F4F4F4\",\n            output_dir=output_dir,\n            reveal_when_success=reveal_when_success\n        )\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.__init__","title":"<code>__init__(search_dir=None)</code>","text":"<p>Initialize the subspace tree from the given directory.</p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>PathLike</code> <p>[description]</p> <code>None</code> Source code in <code>omoospace\\subspace.py</code> <pre><code>def __init__(\n    self,\n    search_dir: PathLike = None\n):\n    \"\"\"Initialize the subspace tree from the given directory.\n\n    Args:\n        search_dir (PathLike): [description]\n    \"\"\"\n    super().__init__()\n    if (search_dir):\n        self.from_dir(search_dir)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.add_entity","title":"<code>add_entity(path)</code>","text":"<p>Add subspace node to the tree based on entity.</p> <p>The entity path must be real, not in ideal.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>PathLike</code> <p>[description]</p> required <p>Returns:</p> Name Type Description <code>Route</code> <code>Node</code> <p>List of subspace name along the route.</p> <p>Raises:</p> Type Description <code>InvalidError</code> <p>entity path is invalid.</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>def add_entity(self, path: PathLike) -&gt; Node:\n    \"\"\"Add subspace node to the tree based on entity.\n\n    The entity path must be real, not in ideal.\n\n    Args:\n        path (PathLike): [description]\n\n    Returns:\n        Route: List of subspace name along the route.\n\n    Raises:\n        InvalidError: entity path is invalid.\n    \"\"\"\n    entity = Path(path).resolve()\n    if not is_entity(entity) == 0:\n        InvalidError(entity, 'entity')\n\n    # Get relpath parts. remove those directory that is not entity.\n    entities = [entity]\n    for parent in entity.parents:\n        if is_entity(parent):\n            entities.append(parent)\n    entities.reverse()\n\n    # Get route nodes. remove duplicate prefix.\n    def is_valid_name(namespace):\n        return not is_version(namespace) \\\n            and not is_number(namespace)\n\n    route: Route = []\n    node = self\n    for entity in entities:\n        entity_name: str = entity.stem\n\n        namespaces: list[str] = entity_name.split('_')\n        subspace_profile_path = Path(entity, \"Subspace.yml\").resolve()\n\n        # clip matched prefix spaces\n        for i in range(len(route)):\n            route_str_suffix = '_'.join(route[i:])\n            name_prefix = '_'.join(namespaces[:len(route) - i])\n            if route_str_suffix == name_prefix:\n                namespaces = namespaces[len(route) - i:]\n                break\n\n        namespaces = list(filter(is_valid_name, namespaces))\n\n        # create or get subspace by namespace\n        for i in range(len(namespaces)+1):\n            # if all namespace is match,the entity will be add to current route\n            # so the index is start from -1\n            i = i - 1\n            is_last = i == len(namespaces)-1\n            subspace_route = route + namespaces[:i+1]\n            if (len(subspace_route) == 0):\n                continue\n\n            node_path = \"/\" + \"/\".join(subspace_route)\n            subspace_node = self.find(\n                match=lambda node: node.path == node_path\n            )\n            if not subspace_node:\n                if is_last and subspace_profile_path.is_file():\n                    with subspace_profile_path.open('r', encoding='utf-8') as file:\n                        subspace_profile = yaml.load(file) or {}\n                else:\n                    subspace_profile = {}\n                subspace = Subspace(\n                    pathname=namespaces[i],\n                    profile=subspace_profile,\n                )\n                subspace_node = node.add(subspace)\n\n            # if is last, add enitity to it.\n            if is_last and entity not in subspace_node.data.entities:\n                subspace_node.data.entities.append(entity)\n\n            # assign type\n            subspace_type = subspace_node.data.type\n            if is_last and entity.is_dir():\n                subspace_node.data.type = SubspaceType.DIRECTORY\n            elif subspace_type != SubspaceType.DIRECTORY \\\n                    and is_last and entity.is_file():\n                subspace_node.data.type = SubspaceType.FILE\n            elif subspace_type != SubspaceType.DIRECTORY \\\n                    and subspace_type != SubspaceType.FILE\\\n                    and entity.exists():\n                subspace_node.data.type = SubspaceType.PHANTOM\n\n            # what ever is end node or not, all nodes are passed through.\n            subspace_node.data.flow += 1\n\n            node = subspace_node\n        route.extend(namespaces)\n    return node\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.draw_graph","title":"<code>draw_graph(output_dir, reveal_when_success=True)</code>","text":"<p>Draws the graph and export html file.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>PathLike</code> <p>[description]</p> required <code>reveal_when_success</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> Source code in <code>omoospace\\subspace.py</code> <pre><code>def draw_graph(\n    self,\n    output_dir: PathLike,\n    reveal_when_success: bool = True\n):\n    \"\"\"Draws the graph and export html file.\n\n    Args:\n        output_dir (PathLike): [description]\n        reveal_when_success (bool, optional): [description]. Defaults to True.\n    \"\"\"\n    node_dict = {\n        \".\": {\n            \"name\": \"(Root)\",\n            \"content\": \"&amp;nbsp(Root)&amp;nbsp\",\n            \"color\": \"#BEBEBE\",\n            \"size\": len(self)+20,\n            \"level\": 0,\n            \"border_width\": 0,\n        }\n    }\n    for node in self:\n        subspace: Subspace = node.data\n        parent: Subspace = node.parent.data if node.parent else None\n\n        if (subspace.type == SubspaceType.PHANTOM):\n            color = \"#939393\"\n        elif (subspace.type == SubspaceType.DIRECTORY):\n            color = \"#F6B330\"\n        else:\n            color = \"#585858\"\n\n        node_dict[node.path] = {\n            \"name\": subspace.html_name,\n            \"parent\": node.parent.path if parent else \".\",\n            \"content\": \"&lt;br&gt;\".join(subspace.html_entities),\n            \"color\": color,\n            \"size\": 5+subspace.flow,\n            # \"level\": node.depth,\n            \"border_width\": 0,\n            \"edge_width\": 5+subspace.flow,\n            \"edge_color\": '#3F3F3F',\n        }\n\n    draw_graph(\n        node_dict,\n        bgcolor=\"#111112\",\n        font_color=\"#F4F4F4\",\n        output_dir=output_dir,\n        reveal_when_success=reveal_when_success\n    )\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.from_dir","title":"<code>from_dir(search_dir, recursive=True)</code>","text":"<p>Set the subspace tree from the given directory.</p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>PathLike</code> <p>[description]</p> required <code>recursive</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> Source code in <code>omoospace\\subspace.py</code> <pre><code>def from_dir(\n    self,\n    search_dir: PathLike,\n    recursive: bool = True\n):\n    \"\"\"Set the subspace tree from the given directory.\n\n    Args:\n        search_dir (PathLike): [description]\n        recursive (bool, optional): [description]. Defaults to True.\n    \"\"\"\n    entities = self.get_entities(search_dir, recursive=recursive)\n    for entity in entities:\n        self.add_entity(entity)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.get_entities","title":"<code>get_entities(search_dir, recursive=True)</code>  <code>classmethod</code>","text":"<p>Recursively find all entities in the search directory .</p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>PathLike</code> <p>[description]</p> required <code>recursive</code> <code>bool</code> <p>[description]. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>list[Entity]</code> <p>list[Entity]: [description]</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>@classmethod\ndef get_entities(\n    cls,\n    search_dir: PathLike,\n    recursive: bool = True\n) -&gt; list[Entity]:\n    \"\"\"Recursively find all entities in the search directory .\n\n    Args:\n        search_dir (PathLike): [description]\n        recursive (bool, optional): [description]. Defaults to True.\n\n    Returns:\n        list[Entity]: [description]\n    \"\"\"\n    search_path: Path = Path(search_dir).resolve()\n    entities: list[Entity] = []\n    if recursive:\n        # FIXME: replace this with Path.walk (python 3.12)\n        # https://docs.python.org/3/library/pathlib.html\n        for root, dirs, files in os.walk(search_path):\n            for path in [*dirs, *files]:\n                child = Path(root, path).resolve()\n                if is_entity(child):\n                    entities.append(child)\n    else:\n        for child in search_path.iterdir():\n            if is_entity(child):\n                entities.append(child)\n    return entities\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.get_entity_route","title":"<code>get_entity_route(path)</code>  <code>classmethod</code>","text":"<p>Returns the route of entity path.</p> <p>This is a useful function to generate correct path of sourcefile output.</p> <p>For example: <pre><code>filepath = \"c:/path/to/Project/SourceFiles/SQ010_SH0100.blend\"\nroute = SubspaceTree.get_entity_route(filepath)\n&gt;&gt;&gt; [\"SQ010\",\"SH0100\"]\nroute_str = \"_\".join(route)\n&gt;&gt;&gt; \"SQ010_SH0100\"\n</code></pre> So the render ouput filename should be <code>SQ010_SH0100.####.png</code></p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>PathLike</code> <p>[description]</p> required <p>Returns:</p> Name Type Description <code>Route</code> <code>Route</code> <p>The list of pathname of subspace.</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>@classmethod\ndef get_entity_route(cls, path: PathLike) -&gt; Route:\n    \"\"\"Returns the route of entity path.\n\n    **This is a useful function to generate correct path of sourcefile output.**\n\n    For example:\n    ```python\n    filepath = \"c:/path/to/Project/SourceFiles/SQ010_SH0100.blend\"\n    route = SubspaceTree.get_entity_route(filepath)\n    &gt;&gt;&gt; [\"SQ010\",\"SH0100\"]\n    route_str = \"_\".join(route)\n    &gt;&gt;&gt; \"SQ010_SH0100\"\n    ```\n    So the render ouput filename should be `SQ010_SH0100.####.png`\n\n    Args:\n        path (PathLike): [description]\n\n    Returns:\n        Route: The list of pathname of subspace.\n    \"\"\"\n    subspace_tree = cls()\n    entity_end_node = subspace_tree.add_entity(path)\n    return entity_end_node.path.split(\"/\")[1:]\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.render_table","title":"<code>render_table()</code>","text":"<p>List subspaces in table as rich str.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>[description]</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>def render_table(self) -&gt; str:\n    \"\"\"List subspaces in table as rich str.\n\n    Returns:\n        str: [description]\n    \"\"\"\n\n    table = Table(\n        \"Subspace\",\n        \"Comments\",\n        \"Entities\"\n    )\n\n    for node in self:\n        subspace: Subspace = node.data\n        table.add_row(\n            subspace.ui_name,\n            \"\\n\".join(subspace.ui_comments),\n            \"\\n\".join(subspace.ui_entities)\n        )\n    return table\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.render_tree","title":"<code>render_tree()</code>","text":"<p>Render the tree as rich str.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>[description]</p> Source code in <code>omoospace\\subspace.py</code> <pre><code>def render_tree(self) -&gt; str:\n    \"\"\"Render the tree as rich str.\n\n    Returns:\n        str: [description]\n    \"\"\"\n\n    label_dict = {\n        \"\ud83d\udcc1\": \"direcotry subspace\\nwhich contains Subspace.yml.\",\n        \"\ud83d\udcc4\": \"file subspace\\nwhich refers to a leaf file.\",\n        \"\ud83d\udcbf\": \"phantom | unknown subspace\\nwhich has no entity.\",\n        \"\u26d4\": \"dummy subspace\\nwhich have not created yet.\"\n    }\n\n    return Grid(\n        self.format(repr=\"{node.data.ui_name}\", title=\"(Root)\"),\n        Instruction(label_dict)\n    )\n</code></pre>"},{"location":"clis/create/","title":"Create","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/create/#create","title":"create","text":"<p>Create new omoospace.</p> <p>Usage:</p> <pre><code>create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -d, --dst DIRECTORY\n  --help               Show this message and exit.\n</code></pre>"},{"location":"clis/export/","title":"Export","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/export/#export","title":"export","text":"<p>Export new package.</p> <p>Usage:</p> <pre><code>export [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  -d, --dst PATH         The output path of Package\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/import/","title":"Import","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/import/#import","title":"import","text":"<p>Import a package.</p> <p>Usage:</p> <pre><code>import [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/","title":"Set","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/set/#set","title":"set","text":"<p>Add or update stuffs to omoospace.</p> <p>Usage:</p> <pre><code>set [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -s, --subspace         Add or update subspace directory.\n  -p, --process          Add or update process directory.\n  -c, --creator          Add or update creator.\n  -so, --software        Add or update software.\n  -w, --work             Add or update work filepath.\n  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/#creator","title":"creator","text":"<p>Add or update creator.</p> <p>Usage:</p> <pre><code>set creator [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/#process","title":"process","text":"<p>Add or update process directory.</p> <p>Usage:</p> <pre><code>set process [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/#software","title":"software","text":"<p>Add or update software.</p> <p>Usage:</p> <pre><code>set software [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/#subspace","title":"subspace","text":"<p>Add or update subspace directory.</p> <p>Usage:</p> <pre><code>set subspace [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/set/#work","title":"work","text":"<p>Add or update work filepath.</p> <p>Usage:</p> <pre><code>set work [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/show/","title":"Show","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/show/#show","title":"show","text":"<p>Show omoospace statistics</p> <p>Usage:</p> <pre><code>show [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -i, --profile          Show omoospace profile.\n  -d, --directories      Show omoospace directory tree.\n  -s, --subspaces        Show omoospace subspace tree.\n  -e, --entities         Show omoospace entities.\n  -p, --packages         Show omoospace packages.\n  -os, --omoospace PATH  Set the working omoospace path.\n  -r, --report-dir PATH  Set Directory of structure.html for structure\n                         visualization\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/show/#directories","title":"directories","text":"<p>Show omoospace directory tree.</p> <p>Usage:</p> <pre><code>show directories [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/show/#entities","title":"entities","text":"<p>Show omoospace packages.</p> <p>Usage:</p> <pre><code>show entities [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/show/#packages","title":"packages","text":"<p>Show omoospace entities.</p> <p>Usage:</p> <pre><code>show packages [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/show/#subspaces","title":"subspaces","text":"<p>Show omoospace subspace tree.</p> <p>Usage:</p> <pre><code>show subspaces [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -os, --omoospace PATH  Set the working omoospace path.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"clis/unregister/","title":"Unregister","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"clis/unregister/#unregister","title":"unregister","text":"<p>Add or update stuffs to omoospace.</p> <p>Usage:</p> <pre><code>unregister [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -c, --creator    Remove creator from setting presets.\n  -so, --software  Remove software from setting presets.\n  -r, --role       Remove role from setting presets.\n  --help           Show this message and exit.\n</code></pre>"},{"location":"clis/unregister/#creator","title":"creator","text":"<p>Remove creator from setting presets.</p> <p>Usage:</p> <pre><code>unregister creator [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"clis/unregister/#role","title":"role","text":"<p>Remove role from setting presets.</p> <p>Usage:</p> <pre><code>unregister role [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"clis/unregister/#software","title":"software","text":"<p>Remove software from setting presets.</p> <p>Usage:</p> <pre><code>unregister software [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"}]}