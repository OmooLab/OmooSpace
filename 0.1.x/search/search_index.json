{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Omoospace","text":"<p>Omoospace is a scalable directory structure solution for digital creation works. We provide a Python library for managing omoospace, including creating omoospace, shipping packages, setting subspace, etc.</p> <p>What is \"Omoospace\", and how does it rule all your creation files?</p> <p>This library is for developing DCC plugins like blender add-ons to integrate omoospace into software. But remember, omoospace is just a directory guide. It should be easy to maintain manually. We do not recommend any over-design that only works by using the plugin. This library aims to build plugins to avoid repetitive work and have a more global view of the whole project structure, which consists of nested subspaces, not to manage a project entirely on a program without touching the folders.</p>"},{"location":"#installation","title":"Installation","text":"<p>This library requires Python version 3.9 or above (python official download link). You can use pyenv or conda for managing multiple Python versions on a single machine.</p> <p>Run the following command to install omoospace:</p> <pre><code>pip install omoospace\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>For Developers</p>"},{"location":"artists/","title":"For Artists","text":""},{"location":"developers/","title":"For Developers","text":""},{"location":"developers/#omoospace","title":"Omoospace","text":""},{"location":"developers/#create-new-omoospace","title":"Create New Omoospace","text":"<pre><code>from omoospace import create_omoospace\n\nomoos = create_omoospace(\n    name='new project',\n    root_dir='temp',\n    description='A new project for testing.',\n    reveal_in_explorer=False\n)\n\nassert omoos.root_path == Path('temp', 'NewProject').resolve()\nassert omoos.name == 'new project'\nassert omoos.description == 'A new project for testing.'\nassert len(omoos.entities) == 0\nassert len(omoos.subspace_tree_dict) == 0\n</code></pre>"},{"location":"developers/#manage-omoospace","title":"Manage Omoospace","text":"<p>Example omoospace:</p> <pre><code>path/to/MyProject\n|-- Contents\n|-- ExternalData\n|-- SourceFiles\n|   |-- AssetA.blend\n|   |-- AssetB\n|   |   |-- Subspace.yml\n|   |   |-- 001-modeling\n|   |   |   `-- AssetB.zpr\n|   |   |-- 002-texturing\n|   |   |   `-- AssetB.spp\n|   |   `-- 003-rendering\n|   |       `-- AssetB.blend\n|   `-- AssetC\n|       |-- Subspace.yml\n|       |-- AssetC.blend\n|       |-- PartA.blend\n|       `-- PartB.blend\n`-- Omoospace.yml\n</code></pre> <pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\nassert omoos.root_path == 'path/to/MyProject'\nassert omoos.sourcefiles_path == Path('path/to/MyProject', 'SourceFiles')\nassert omoos.contents_path == Path('path/to/MyProject', 'Contents')\nassert omoos.externaldata_path == Path('path/to/MyProject', 'ExternalData')\nassert omoos.stageddata_path == Path('path/to/MyProject', 'StagedData')\nassert omoos.references_path == Path('path/to/MyProject', 'References')\nassert omoos.profile_path == Path('path/to/MyProject', \"Omoospace.yml\")\n\nassert omoos.contents_path.is_dir()\nassert omoos.sourcefiles_path.is_dir()\nassert omoos.externaldata_path.is_dir()\nassert omoos.profile_path.is_file()\n\nassert omoos.name == 'Mini'\nassert omoos.description == 'A mini omoospace.'\n\nwith pytest.raises(AttributeError):\n    omoos.creators = ['icrdr']\n\nwith pytest.raises(AttributeError):\n    omoos.softwares = ['Blender']\n\nwith pytest.raises(AttributeError):\n    omoos.works = ['Heart.fbx']\n\nassert len(omoos.entities) == 9\ntree_dict = omoos.subspace_tree_dict\nassert len(tree_dict) == 3\nassert tree_dict[0]['data'].node_name == \"AssetB\"\nassert len(tree_dict[0]['data'].entities) == 4\nassert tree_dict[1]['data'].node_name == \"AssetC\"\nassert len(tree_dict[1]['data'].children) == 2\n</code></pre>"},{"location":"developers/#manage-subspace","title":"Manage Subspace","text":"<p>Example omoospace:</p> <pre><code>path/to/MyProject\n|-- Contents\n|-- ExternalData\n|-- SourceFiles\n|   |-- Heart.blend\n|   |-- Heart_v001.blend\n|   |-- Heart_Valves.blend\n|   |-- Heart_Valves_v001_autosave.spp\n|   `-- Liver.zpr\n`-- Omoospace.yml\n</code></pre> <pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\nsubs_Heart = omoos.add_subspace(\n    name=\"heart\",\n    reveal_in_explorer=False\n)\nassert subs_Heart.name == \"heart\"\n\n# test collect entities feature.\nassert len(subs_Heart.entities) == 3\nassert len(subs_Heart.children) == 1\nassert len(list(subs_Heart.root_path.iterdir())) == 4\n\nsubs_Valves = omoos.add_subspace(\n    name=\"valves\",\n    parent_dir=subs_Heart.root_path,\n    description='The valves of heart.',\n    reveal_in_explorer=False\n)\n\nassert subs_Valves.route == ['Heart', 'Valves']\nassert subs_Valves.description == 'The valves of heart.'\n</code></pre>"},{"location":"developers/#manage-process","title":"Manage Process","text":"<pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\nomoos.add_process(\n    'modeling', 'texturing', 'shading', 'rendering',\n    reveal_in_explorer=False\n)\nassert Path(omoos.sourcefiles_path, '001-Modeling').is_dir()\nassert Path(omoos.sourcefiles_path, '002-Texturing').is_dir()\nassert Path(omoos.sourcefiles_path, '003-Shading').is_dir()\nassert Path(omoos.sourcefiles_path, '004-Rendering').is_dir()\n\nomoos.add_process(\n    'modeling', 'texturing', 'shading', 'rendering',\n    reveal_in_explorer=False\n)\n\nomoos.add_process(\n    \"sculpting\",\n    parent_dir=Path(omoos.sourcefiles_path, '001-Modeling'),\n    reveal_in_explorer=False\n)\n\nassert Path(omoos.sourcefiles_path, '001-Modeling', 'Sculpting').is_dir()\nassert len(omoos.subspace_tree_dict) == 0\n\nfile_path = write_file(\n    'Heart.zpr',\n    root_dir=Path(omoos.sourcefiles_path, '001-Modeling', 'Sculpting')\n)\nsubs_Heart = omoos.get_subspace(file_path)\nassert subs_Heart.route == ['Heart']\n</code></pre>"},{"location":"developers/#manage-creator","title":"Manage Creator","text":"<pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\ncreator = omoos.add_creator(\n    email='manan@abc.com',\n    name='manan',\n    website='https://www.manan.com'\n)\nassert creator.name == 'manan'\nassert omoos.creators[0].name == 'manan'\n\ncreator.name = 'Ma Nan'\nassert creator.name == 'Ma Nan'\nassert omoos.creators[0].name == 'Ma Nan'\n\ncreator.email = 'icrdr@abc.com'\ncreator = omoos.get_creator('icrdr@abc.com')\nassert len(omoos.creators) == 1\nassert creator.name == 'Ma Nan'\nassert creator.role == None\n\ncreator.role = 'Director'\nassert omoos.creators[0].role == 'Director'\n</code></pre>"},{"location":"developers/#manage-software","title":"Manage Software","text":"<pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\nsoftware = omoos.add_software(\n    name='Blender',\n    version='3.6.5'\n)\nassert software.name == 'Blender'\nassert omoos.softwares[0].name == 'Blender'\n\nsoftware.version = '4.0.0'\nassert software.version == '4.0.0'\nassert omoos.softwares[0].version == '4.0.0'\n\nsoftware = omoos.add_software(\n    name='Houdini',\n    version='19.5.577'\n)\n\nassert omoos.get_software('Blender').version == '4.0.0'\nassert omoos.get_software('Houdini').version == '19.5.577'\n\nwith pytest.raises(AttributeError):\n    software.plugins = ['omoospace']\n\nsoftware.set_plugin(\n    name='omoospace',\n    version='0.1.5'\n)\nassert len(software.plugins) == 1\n</code></pre>"},{"location":"developers/#manage-work","title":"Manage Work","text":"<p>Example omoospace:</p> <pre><code>path/to/MyProject\n|-- Contents\n|   `-- Models\n|       |-- Heart\n|       |   |-- Textures\n|       |   |   `-- Heart_BaseColor.png\n|       |   `-- Heart.fbx\n|       |-- Liver\n|       |   |-- Liver.bin\n|       |   |-- Liver.gltf\n|       |   |-- Liver.png\n|       `-- Lung.glb\n|-- ExternalData\n|-- SourceFiles\n`-- Omoospace.yml\n</code></pre> <pre><code>from omoospace import Omoospace\n\nomoos = Omoospace('path/to/MyProject')\nwork = omoos.add_work(\n    Path(omoos.contents_path, 'Models/Heart')\n)\nassert work.name == 'Heart'\nassert len(work.items) == 1\nassert work.items[0] == 'Models/Heart'\nassert omoos.works[0].name == 'Heart'\nassert omoos.get_work('Heart').items[0] == 'Models/Heart'\n\nwork.add_item(\n    Path(omoos.contents_path, 'Models/Liver'),\n    Path(omoos.contents_path, 'Models/Liver'),\n    Path(omoos.contents_path, 'Models/Lung.glb')\n)\nassert len(omoos.works[0].items) == 3\nPath(omoos.contents_path, 'Models/Lung.glb').unlink()\nassert len(omoos.works[0].items) == 2\n\nwith pytest.raises(AttributeError):\n    work.items = ['Models/Liver']\n\nwork.set_items(\n    Path(omoos.contents_path, 'Models/Liver'),\n)\nassert len(omoos.works[0].items) == 1\n</code></pre>"},{"location":"developers/#subspace","title":"Subspace","text":""},{"location":"developers/#get-source-file-route","title":"Get Source File Route.","text":"<pre><code>from omoospace import get_route\n\nassert get_route('SQ010/AssetA.blend') == ['SQ010', 'AssetA']\n</code></pre> <p>More examples:</p> Files Expected Result SQ010_AssetA.blend ['SQ010','AssetA'] SQ010/AssetA.blend ['AssetA'] SQ010/AssetA.blendSQ010/Subspace.yml ['SQ010','AssetA'] SQ010_SH0100/AssetA.blendSQ010_SH0100/Subspace.yml ['SQ010','SH0100','AssetA'] SQ010_SH0100/SH0100_AssetA.blendSQ010_SH0100/Subspace.yml ['SQ010','SH0100','AssetA'] SQ010_SH0100/SQ010_SH0100_AssetA.blendSQ010_SH0100/Subspace.yml ['SQ010','SH0100','AssetA'] SQ010_SH0100/SQ010_SH0100_AssetA.blendSQ010_SH0100/Subspace.yml ['SQ010','SH0100','AssetA'] AssetA_001.blend ['AssetA'] AssetA__v001.blend ['AssetA'] Asset-A__v001.blend ['AssetA'] AssetA_v001_autosave.blend ['AssetA'] AssetA_AssetA.blend ['AssetA','AssetA'] Asset A/AssetA.blendAsset A/Subspace.yml ['AssetA']"},{"location":"developers/#get-source-file-output-name","title":"Get Source File Output Name.","text":"<pre><code>from omoospace import get_route\n\nassert get_route_str('SQ010/AssetA.blend','HighRes','v001') \\\n   == 'SQ010_SH0100_AssetA_HighRes_v001'\n</code></pre> <p>More examples:</p> Files Subsets Expected Result SQ010_AssetA.blend 'v001' 'SQ010_AssetA_v001' SQ010/AssetA.blendSQ010/Subspace.yml 'LowRes' 'SQ010_AssetA_LowRes' SQ010_SH0100/AssetA.blendSQ010_SH0100/Subspace.yml 'HighRes', 'v001' 'SQ010_SH0100_AssetA_HighRes_v001' AssetA_AssetA.blend 'AssetA_AssetA'"},{"location":"omoospace/","title":"What is omoospace?","text":"<p>Omoospace is a scalable directory structure solution for digital creation works. Its aim is universality, flexibility, and semantics not only for large projects and teamwork but also for small projects and solo work. Whether it is a 3d modeling task or a series production, it all fits.</p>"},{"location":"omoospace/#overview","title":"Overview","text":"<p>The rules are simple:</p> <ol> <li>Naming everything with PascalCase.</li> <li> <p>5 main directories:</p> <ul> <li><code>SourceFiles</code> stores source files of the software.</li> <li><code>Contents</code> stores digital content in a common format.</li> <li><code>ExternalData</code> stores data from external sources.</li> <li><code>References</code> stores reference resources (optional).</li> <li><code>StagedData</code> stores temporary data (optional).</li> </ul> </li> <li> <p><code>SourceFiles</code> <code>Contents</code> subdirectories (optional):</p> <ul> <li>Process names set the <code>SourceFiles</code> subdirectories.</li> <li>Content types set the <code>Contents</code> subdirectories.</li> </ul> </li> <li> <p>Set Subspaces by filename prefix or subdirectory based on creation objects.</p> </li> <li>Omoospace.yml stores the workspace profile, such as creator profiles, software versions, etc.</li> </ol> <p></p> <p>A diagram illustrating the structure of omoospace</p>"},{"location":"omoospace/#omoospace-structure","title":"Omoospace Structure","text":""},{"location":"omoospace/#subspace","title":"Subspace","text":"<p>Subspace is a sub-workspace based on objects of creation conducive to finding, sorting, and understanding. Subspace can be nested. For example, an anime series project, each episode is a creation object. Under that object, multiple secondary objects can be set based on the episode\u2019s sequences, and you can continue to split each secondary object. Each object is a sub-workspace of the main workspace. We call those sub-workspaces Subspace, and name them after their objects.</p> <p>The nested subspaces can generate a tree-like graph that presents the structure of the entire project, as shown in the figure below.</p> <p></p> <p>So, how should you set subspace? And what is worth noting when setting subspaces?</p>"},{"location":"omoospace/#subspace-can-be-set-by-filename-prefix-or-subdirectory","title":"Subspace can be set by filename prefix or subdirectory","text":"<p>The phrases that are separated by <code>_</code> are subspaces, for example:</p> <pre><code>|-- SourceFiles\n|   `-- FilmA_SQ020_ModelB.blend\n</code></pre> <p>Evidently, this blender file is for creating <code>Model B</code> of <code>Sequence 010</code> of <code>Film A</code>. The nested subspaces form a route from parent to child: <code>FilmA &gt; SQ020 &gt; ModelB</code>. We call it Subspace Route.</p> <p>You can also use subdirectories instead of filename prefixes. To distinguish Subspace Directory from ordinary directories, the subspace directory must contain a marker file named <code>Subspace.yml</code>.</p> <pre><code>|-- SourceFiles\n|   `-- FilmA\n|       |-- Subspace.yml # marker\n|       `-- SQ020\n|           |-- Subspace.yml # marker\n|           `-- ModelB.blend\n</code></pre> <p>The subspace route above is also <code>FilmA &gt; SQ020 &gt; ModelB</code>.</p> <p>Subspace is just a concept, and its existence relies on files or directories. We call those files and directories Subspace Entities of their subspace. As you can imagine, one subspace may have multiple entities to present them.</p> <pre><code>|-- SourceFiles\n|   `-- FilmA\n|       |-- Subspace.yml # marker\n|       |-- FilmA.prproj\n|       |-- SQ020.prproj\n|       `-- SQ020.blend\n</code></pre> <p>File <code>SQ020.prproj</code> and <code>SQ020.blend</code> are <code>Sequence 010 (SQ020)</code> entities. Similarly, the directory <code>FilmA</code> and file <code>FilmA.prproj</code> are <code>Film A (FilmA)</code> entities. According to subspace entities, we classify subspaces into three kinds:</p> <ul> <li>Directory Subspace has a directory to present it.</li> <li>File Subspace has only files to present it, no directory.</li> <li>Phantom Subspace has no direct content in its files.</li> </ul> <p>Note</p> <p>The file <code>FilmA_SQ020_ModelB.blend</code> only contains the <code>Model B</code> object. <code>FilmA</code> and <code>SQ020</code> are just pure concepts. They are typical phantom subspaces.</p>"},{"location":"omoospace/#a-subspace-route-is-formed-by-combining-the-subspace-directory-and-filename-prefix","title":"A subspace route is formed by combining the subspace directory and filename prefix.","text":"<p>Parent subspace directories and filename prefixes form the subspace route of an entity. Suppose the entity filename prefix contains its parent subspace name. They should overlap each other as much as possible, for example:</p> <pre><code>|-- SourceFiles\n|   |-- FilmA\n|   |   |-- Subspace.yml\n|   |   `-- SQ020_ModelB.blend\n</code></pre> <pre><code>|-- SourceFiles\n|   |-- FilmA\n|   |   |-- Subspace.yml\n|   |   `-- FilmA_SQ020_ModelB.blend\n</code></pre> <pre><code>|-- SourceFiles\n|   |-- FilmA_SQ020\n|   |   |-- Subspace.yml\n|   |   `-- FilmA_SQ020_ModelB.blend\n</code></pre> <p>All examples' routes are all <code>FilmA &gt; SQ020 &gt; ModelB</code>.</p> <p>Note</p> <p>There are no strict rules of when to use overlapping forms of directory structure. It is all up to the user's decision. Creators should design the directory structure to fit the project needs.</p>"},{"location":"omoospace/#a-subspace-name-should-not-be-pure-numbers-or-versions-or-autosave","title":"A subspace name should not be pure numbers or versions or autosave.","text":"<p>Numbers, versions, and autosave semantics are not for new objects, so they should not be subspace names. For example, <code>v001</code> in <code>FilmA_SQ020_ModelB_v001.blend</code>,  is not a new creation object. The file is still for creating <code>ModelB</code>. The subspace definition defines a subspace as a particular creation object. So <code>v001</code> is not a subspace.</p>"},{"location":"omoospace/#write-the-subspace-profile-into-subspaceyml","title":"Write the subspace profile into Subspace.yml.","text":"<p>Besides a marker file, <code>Subspace.yml</code> is also a subspace profile.</p> <pre><code># Subspace.yml\nname: Subspace's name\ndescription: Comments to this subspace.\n</code></pre> <p>You can create the profile file to any subspace with the route as its filename, not the entire route but the subroute to the parent subspace.</p> <pre><code>|-- SourceFiles\n|   |-- FilmA\n|   |   |-- Subspace.yml\n|   |   |-- SQ020.yml\n|   |   |-- SQ020_ModelB.yml\n|   |   `-- SQ020_ModelB.blend\n</code></pre> <pre><code># SQ020.yml\nname: Sequence 020\ndescription: The beginning scene of the story.\n\n# SQ020_ModelB.yml\nname: Model B\ndescription: A 3d model.\n</code></pre>"},{"location":"omoospace/#sourcefiles","title":"SourceFiles","text":"<p>It stores the source files of the software or executable scripts, pipelines, etc.</p> <p><code>SourceFiles</code> stores processes, and <code>Contents</code> stores results. The former must be opened with specific software, executed by the program, and pre-computed. The latter generally allows cross-software reading without any pre-computation.</p> <p>For example, I am using Blender's geometry node for procedural modeling. I should place the source file of Blender in <code>SourceFiles</code>. However, to load the procedural model in Unity, it is necessary to export it as a general format, such as .fbx, and I should place the exported file in <code>Contents</code>.</p>"},{"location":"omoospace/#subdirectories-by-process-name-optional","title":"Subdirectories by process name (optional)","text":"<p>When a project grows, you may need to separate many source files into directories. Besides the subspace directory, we recommend setting subdirectories by process name.</p> <p>Some optional process names:</p> <pre><code># Film production processes\n|-- SourceFiles\n|   |-- PreProduction\n|   |-- Production\n|   `-- PostProduction\n</code></pre> <p><pre><code># Post-production subprocesses\n|-- SourceFiles\n|   |-- Compositing\n|   |-- SoundEditing\n|   `-- VideoEditing\n</code></pre> You can add sequence numbers in front.</p> <pre><code># 3D modeling processes\n|-- SourceFiles\n|   |-- 001-Modeling\n|   |-- 002-Texturing\n|   |-- 003-Rendering\n|   `-- 004-Shading\n</code></pre> <p>You can mix use process directories and subspace directories.</p> <pre><code>&lt;SeriesTitle&gt; # (Root)\n|-- SourceFiles\n|   |-- PreProduction\n|   |   `-- &lt;ModelName&gt; # (Root) &gt; &lt;ModelName&gt;\n|   `-- &lt;Episode&gt; # (Root) &gt; &lt;Episode&gt;\n|       |-- Subspace.yml\n|       |-- Production\n|       `-- PostProduction\n</code></pre> <p>Process subdirectories should fit your workflow. But be aware of the following rules:</p> <ul> <li>Pay attention to the naming style. It should be a gerund for the process. For example, not \"Models\" but \"Modeling\", not \"Scenes\" but \"SceneAssembling\". This way, the Process is emphasized, not the result.</li> <li>You can adjust the process subdirectories freely as the project expands.</li> </ul>"},{"location":"omoospace/#put-source-files-without-creation-object-under-void-optional","title":"Put source files without creation object under Void (optional)","text":"<p>Most source files have their object, such as rendering images or exporting a 3D model. However, some source files are not used as the primary process and have no particular object but have storage needs. We put such source files in a unique subspace called Void, which doesn\u2019t need <code>Subspace.yml</code>.</p> <p>Note</p> <p>Any subspaces in Void are also Void Subspace.</p> <p>Void subspace can be in a filename prefix or as a directory.</p> <pre><code>|-- SourceFiles\n|   |-- BeatingHeart\n|   |   `-- Void_HowToBeat.hip\n|   |-- Void_RnD_MetaBall.blend\n|   |-- Void\n|   |   `-- MaNan.hip\n</code></pre> <p>Note</p> <p>Although the source files under void subspace have no creation objects, they still allow outputting. However, their outputs could be more rigorous and necessary but experimental and temporary. For example, <code>Void/HeartBeating.blend</code> can still render <code>Void_HeartBeating.0001.png</code>. The prefix <code>Void</code> indicates the results are experimental.</p>"},{"location":"omoospace/#sourcefiles-structure-is-always-dynamic-when-a-project-is-in-progress","title":"SourceFiles structure is always dynamic when a project is in progress.","text":"<p>No one knows precisely what to do and how to do their creation work before starting. Plans never keep up with flashing of inspiration. Creation objects constantly change in progress. Although we make a rule for <code>SourceFiles</code> subdirectories, it's for semantic structure and does not mean subdirectories should be static.</p> <p>Feel free to organize files in <code>SourceFiles</code> and follow the inspiration during creation!</p>"},{"location":"omoospace/#contents","title":"Contents","text":"<p>It stores digital content in a common format, whether internal or external, whether a work result or a resource. You should organize all content files here and stick to the rules.</p>"},{"location":"omoospace/#subdirectories-by-content-type-optional","title":"Subdirectories by content type (optional)","text":"<p>Some optional content types:</p> <pre><code># For modeling propose\n|-- Contents\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   `-- Renders\n</code></pre> <pre><code># For short video production propose\n|-- Contents\n|   |-- Audios\n|   |-- Dynamics\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   |-- Renders\n|   `-- Videos\n</code></pre> <pre><code># For film production propose\n|-- Contents\n|   |-- Audios\n|   |-- Dynamics\n|   |-- Fonts\n|   |-- HDAs # Houdini Digital Assets\n|   |-- Images\n|   |-- Materials\n|   |-- Models\n|   |   |-- Characters\n|   |   |-- Nature\n|   |   |-- Props\n|   |   `-- ...\n|   |-- Presets\n|   |-- Renders\n|   |-- Scenes\n|   |-- ScientificData\n|   |-- Scripts\n|   |-- Settings\n|   |-- Shaders\n|   `-- Videos\n</code></pre> <p>Type subdirectories should fit your workflow. But be aware of the following rules:</p> <ul> <li>Pay attention to the naming style. It should be the plural of the content type noun.</li> <li>To avoid confusion and misplacement, merge similar content types into one.</li> <li>It is not recommended to set multi-level subdirectories or add more subdirectories by content type as the project expands.</li> </ul>"},{"location":"omoospace/#the-output-of-the-source-file-is-named-after-its-source-file-subspace-route","title":"The output of the source file is named after its source file subspace route.","text":"<p>There is no subspace directory setting in <code>Contents</code>. But use subspace route as filename prefix to hint the relationship to its source file.</p> <pre><code>|-- Contents\n|   `-- Models\n|       |-- BloodCells_RBC.fbx\n|       `-- BloodCells_WBC.fbx\n|-- SourceFiles\n|   `-- BloodCells.blend\n</code></pre> <p>In the above example, <code>BloodCells_RBC.fbx</code> and <code>BloodCells_WBC.fbx</code> come from <code>BloodCells.blend</code>. <code>RBC</code>, and <code>WBC</code> are subsets of <code>BloodCells.blend</code>. You can easily guess the relationship between them by their filenames.</p> <p>In some cases, one content is a collection of multiple files. e.g., a 3d model with textures or an image sequence of render output. Those sub-file names do not necessarily contain route names, as they are with their root directory, which already hints at its source. As the example below, the texture filename does not need to have <code>Organs</code>, because you wouldn't use those textures without the mesh. </p> <pre><code>|-- Contents\n|   `-- Models\n|       `-- Organs_Heart\n|           |-- Organs_Heart.fbx\n|           `-- Textures\n|               |-- Heart_Roughness.png\n|               `-- Heart_BaseColor.png\n|-- SourceFiles\n|   `-- Organs.blend\n</code></pre> <p>However, it does not mean using the entire route name is forbidden for sub-files, or you can name them randomly. Their name must be semantic.</p>"},{"location":"omoospace/#keep-the-contents-structure-flat-and-static-as-much-as-possible","title":"Keep the Contents structure flat and static as much as possible.","text":"<p>In most software, it will lose the link when the imported file changes its name, or someone moves it. The content files, always as IO paths for source files, must be stable. So, <code>Contents</code> should be centralized, and its structure should be flat and static, which means you should not move content files frequently or make super complex multi-level subdirectories changes often. </p> <p>Plan the structure at the beginning.</p>"},{"location":"omoospace/#externaldata","title":"ExternalData","text":"<p>It stores all data files from external sources. The \u201cexternal\u201d here means that it is created by the creator outside omoospace or not produced within this omoospace. The most common usage of <code>ExternalData</code> is to store resources from the network.</p>"},{"location":"omoospace/#no-need-to-follow-the-naming-rules-do-not-set-any-subdirectories-by-content-type","title":"No need to follow the naming rules; do not set any subdirectories by content type","text":"<p>Just keep its original file structure and naming style. For example:</p> <pre><code>|-- ExternalData\n|   |-- www.models.com_CT_Scanner\n|   |   |-- CT_Scanner.fbx\n|   |   `-- tex\n|   |-- textures_pack-4k\n|   |   |-- wood\n|   |   `-- metal\n|   |-- MyResources\n|   |   |-- Textures\n|   |   |-- Materials\n|   |   `-- Models\n</code></pre> <p>Note</p> <p>Do not put files in the root directory of <code>ExternalData</code>; always under the subdirectory.</p>"},{"location":"omoospace/#it-is-not-the-only-repository-for-all-external-data","title":"It is not the only repository for all external data","text":"<p><code>Contents</code> and <code>SourceFiles</code> also store external data. However, compared with <code>ExternalData</code>, they are stricter. All files need to be categorized and renamed correctly. Meanwhile, <code>ExternalData</code> is a storage place that allows users to ship data freely.</p> <p>If you have stored external source data in <code>Contents</code> | <code>SourceFiles</code>, it is unnecessary to hold it in <code>ExternalData</code> again. For example, an HDRI downloaded from PolyHaven could be directly put under <code>Contents</code> if you rename it to PascalCase style.</p> <p>Note</p> <p>Categorizing and renaming are not fun works, so storing external source data directly into <code>ExternalData</code> is recommended unless you can ensure files under <code>Contents</code> | <code>SourceFiles</code> are strict to the rules.</p>"},{"location":"omoospace/#access-to-own-resource-library-contents-by-creating-soft-links-in-it","title":"Access to own resource library contents by creating soft links in it.","text":"<p>You may have your resource library of 3D assets in a local or network directory (NAS). You usually don't know which asset suits the 3D scene most until you try, like HDRI. Repeating to move resource files from the library to the current working directory for trial isn't enjoyable.</p> <p>So we prefer to create a soft link to the library in <code>ExternalData</code>, then you can easily access the assets from the library.</p> <pre><code>|-- ExternalData\n|   `-- Resouces # Soft link\n</code></pre> <pre><code>D:\n|-- Resouces # My super 3D resource library for everything \n|   |-- Models\n|   |   |-- Cars\n|   |   |-- Animals\n|   |   |-- Plants\n...\n</code></pre>"},{"location":"omoospace/#it-stores-omoospace-packages","title":"It stores omoospace packages","text":"<p>The omoospace package is designed for sharing omoospace data. You store them in <code>ExternalData</code>. </p> <pre><code>|-- ExternalData\n|   |-- BloodCells # Package\n|   |   |-- Package.yml # Package info\n|   |   |-- Contents\n|   |   |   `-- Models\n|   |   |       `-- RedBooldCells_RBC.fbx\n|   |   `-- SourceFiles\n|   |       `-- RedBooldCells.blend\n</code></pre>"},{"location":"omoospace/#references","title":"References","text":"<p>It stores PureRef, Figma, Paper PDF, and Storyboard. Although you are not using them directly, you need to save them. Put them here.</p> <p>Tip</p> <p>If it is Figma online, put the link as a file.</p>"},{"location":"omoospace/#stageddata","title":"StagedData","text":"<p>It stores any software-generated data that the source file can rebuild after deletion, such as temporary files, caches, software bridging files, etc. There is no need to browse <code>StagedData</code> unless necessary.</p> <p>There are no rules for its subdirectory structure.</p>"},{"location":"omoospace/#omoospaceyml","title":"Omoospace.yml","text":"<p>It stores workspace profiles such as creator profiles, software versions, etc.</p> <pre><code>name: Omoospace's name\ndescription: A brief of this Omoospace (Optional)\ncreators: # Creator list of this Omoospace\n  - name: Creator's name\n    email: Creator's email (Optional)\n    role: Creator's role in this Omoospace (Optional)\n    website: Creator's website (Optional)\nsoftwares: # Software list of this Omoospace\n  - name: Software's name\n    version: Software's version\n    plugins: # Plugins list of this Omoospace (Optional)\n      - name: Plugin's name\n        version: Plugin's version\nworks: # Work list of this Omoospace\n  - name: Work's name\n    itmes: \n      - Work's path under Contents\n</code></pre> <p>For example:</p> <pre><code>name: my project\ndescription: An omoospace for creation works\ncreators:\n  - name: MaNan\n    email: icrdr@abc.com\n    website:\n    role: Owner\nsoftwares:\n  - name: Blender\n    version: 3.6.4\n    plugins:\n  - name: Zbrush\n    version: 2023.2\n    plugins:\n  - name: Substance 3D Painter\n    version: 9.0.0\n    plugins:\nworks:\n  - name: MyModel\n    itmes:\n      - MyModel\n</code></pre>"},{"location":"omoospace/#omoospace-package","title":"Omoospace Package","text":"<p>Inspired by the Unity Package, the omoospace package is designed for sharing omoospace data.</p> <p>ExternalData acts like a Packages directory of the Unity project that stores data from other omoospaces.</p> <p>Unity - Manual: Reusing Assets between Projects</p> <p>The internal structure of the package is part of its source omoospace</p> <pre><code>&lt;PackageName&gt;\n|-- Contents # (Optional)\n|-- ExternalData # (Optional)\n|-- References # (Optional)\n|-- SourceFiles # (Optional)\n|-- StagedData # (Optional)\n|-- README.md\n`-- Package.yml # Package info\n</code></pre> <pre><code># Package.yml\nname: Package's name\nversion: Package's version\ndescription: A brief of this Package (Optional)\ncreators: # Creator list of this package\n  - name: Creator's name\n    email: Creator's email (Optional)\n    role: Creator's role in this Omoospace (Optional)\n    website: Creator's website (Optional)\n</code></pre> <p>Note</p> <p>Once you export a package, it has nothing to do with its source omoospace</p>"},{"location":"omoospace/#comparison-with-other-software-project-structures","title":"Comparison with other software project structures","text":"<p>There are some common concepts to help understand.</p> Omoospace Unity Unreal Engine Contents Assets Content ExternalData Packages References SourceFiles Assets Source, Content StagedData Temp Intermediate, Saved, DerivedDataCache Omoospace.yml PorjectSetting Config"},{"location":"omoospace/#qa","title":"Q&amp;A","text":"<ul> <li> <p>Q: Most directory structure solutions of CG work have no distinction between <code>Contents</code> and <code>SourceFiles</code>. Why does omoospace emphasize their differences ?</p> <p>A: This is due to the different purposes of them. The content files, always as an IO path, need stability. So, <code>Contents</code> should be centralized, and its structure should be as flat as possible. Meanwhile, the source files, as entries of human operations, need to be accessible. People split their works by processes and objects, which are the best subdirectory rule of <code>SourceFiles</code>. Therefore, isolating the source files that store \"processes\" and the content files that hold \"results\" is better.</p> </li> <li> <p>Q: Why does <code>Contents</code> have no subspace directories?</p> <p>The previous answer has explained the different purposes of <code>Contents</code> and <code>SourceFiles</code>. However, the <code>Contents</code> structure should be as flat as possible. But to avoid duplicate names, Subspace Prefixes are used. <code>SourceFiles</code>, on the other hand, sets up Subspace Directories for ease of finding.</p> </li> </ul>"},{"location":"roadmap/","title":"To Do","text":"<ul> <li>Moving subspace and all its files from space structure tree node to another node.</li> <li>A more interactive and visual interface for managing omoospace.</li> </ul>"},{"location":"apis/omoospace/","title":"Omoospace","text":""},{"location":"apis/omoospace/#omoospace.omoospace.Creator","title":"<code>Creator</code>","text":"<p>             Bases: <code>ProfileItem</code></p> <p>Creator</p> <p>Attributes:</p> Name Type Description <code>email</code> <code>str</code> <p>Creator email</p> <code>name</code> <code>str</code> <p>Creator name</p> <code>website</code> <code>str</code> <p>Creator website. </p> <code>role</code> <code>str</code> <p>Creator role in omoospace.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>class Creator(ProfileItem):\n    \"\"\"Creator\n\n    Attributes:\n        email (str): Creator email\n        name (str): Creator name\n        website (str, optional): Creator website. \n        role (str, optional): Creator role in omoospace.\n    \"\"\"\n    name: str\n    email: str\n    role: str\n    website: str\n    _item_list_key = 'creators'\n    _item_id_key = 'email'\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace","title":"<code>Omoospace</code>","text":"<p>             Bases: <code>ProfileContainer</code></p> <p>The class of omoospace.</p> <p>An omoospace class instance is always refer to a existed omoospace directory, not dummy. </p> <p>Usage: <pre><code>omoos = Omoospace('path/to/omoospace')\nprint(omoos.root_path)\n# &gt;&gt;&gt; path/to/omoospace\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Omoospace name.</p> <code>description</code> <code>str</code> <p>Omoospace description.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>class Omoospace(ProfileContainer):\n    \"\"\"The class of omoospace.\n\n    An omoospace class instance is always refer to a existed omoospace directory, not dummy. \n\n    Usage:\n    ```python\n    omoos = Omoospace('path/to/omoospace')\n    print(omoos.root_path)\n    # &gt;&gt;&gt; path/to/omoospace\n    ```\n\n    Attributes:\n        name (str): Omoospace name.\n        description (str): Omoospace description.\n    \"\"\"\n\n    name: str\n    description: str\n\n    def __init__(self, detect_dir: PathLike):\n        \"\"\"Initialize from existed omoospace.\n\n        Args:\n            detect_dir (PathLike): The start directory for detecting omoospace. It could be the subdirectories of omoospace.\n\n        Attributes:\n            name (str): Omoospace's name.\n            description (str): Omoospace's description.\n\n        Raises:\n            NotFoundError: No omoospace detected.\n        \"\"\"\n        detect_path = Path(detect_dir).resolve()\n        detect_path_parents = [detect_path, *detect_path.parents]\n        omoos_path = None\n        for detect_path_parent in detect_path_parents:\n            omoos_profile_path = Path(detect_path_parent, 'Omoospace.yml')\n            if omoos_profile_path.exists():\n                omoos_path = detect_path_parent\n                break\n        if not omoos_path:\n            raise NotFoundError(\"omoospace\", detect_dir)\n\n        # path assignment\n        self._root_path = omoos_path\n        self._sourcefiles_path = Path(self.root_path, 'SourceFiles').resolve()\n        self._contents_path = Path(self.root_path, 'Contents').resolve()\n        self._externaldata_path = Path(\n            self.root_path, 'ExternalData').resolve()\n        self._stageddata_path = Path(self.root_path, 'StagedData').resolve()\n        self._references_path = Path(self.root_path, 'References').resolve()\n        self._profile_path = Path(self.root_path, \"Omoospace.yml\").resolve()\n\n    def __check_parent_dir(self, parent_dir: PathLike):\n        parent_path = Path(parent_dir).resolve(\n        ) if parent_dir else self.sourcefiles_path\n\n        # Check if is valid directory\n        if not parent_path.is_dir():\n            raise ExistsError(parent_dir)\n\n        # Check if is in SourceFiles\n        if not is_subpath(parent_path, self.sourcefiles_path, or_equal=True):\n            raise NotIncludeError(parent_dir, \"SourceFiles\")\n\n        return parent_path\n\n    def _to_work_items(self, items: list[PathLike]) -&gt; list[str]:\n\n        items = [Path(item).resolve() for item in items]\n        items = list(filter(self.is_contents_item, items))\n        items = [str(item.relative_to(self.contents_path).as_posix())\n                 for item in items]\n        return list(dict.fromkeys(items))\n\n    def _to_work_item_paths(self, items: list[str]) -&gt; list[Path]:\n\n        items = [Path(self.contents_path, item).resolve() for item in items]\n        items = list(filter(self.is_contents_item, items))\n\n        return list(dict.fromkeys(items))\n\n    @property\n    def root_path(self) -&gt; Path:\n        \"\"\"Path: Root path.\"\"\"\n        return self._root_path\n\n    @property\n    def sourcefiles_path(self) -&gt; Path:\n        \"\"\"Path: SourceFiles directory path.\"\"\"\n        return self._sourcefiles_path\n\n    @property\n    def contents_path(self) -&gt; Path:\n        \"\"\"Path: Contents directory path.\"\"\"\n        return self._contents_path\n\n    @property\n    def externaldata_path(self) -&gt; Path:\n        \"\"\"Path: ExternalData directory path.\"\"\"\n        return self._externaldata_path\n\n    @property\n    def stageddata_path(self) -&gt; Path:\n        \"\"\"Path: StagedData directory path.\"\"\"\n        return self._stageddata_path\n\n    @property\n    def references_path(self) -&gt; Path:\n        \"\"\"Path: Reference directory path.\"\"\"\n        return self._references_path\n\n    @property\n    def profile_path(self) -&gt; Path:\n        \"\"\"Path: Omoospace.yml file path.\"\"\"\n        return self._profile_path\n\n    @property\n    def creators(self) -&gt; list[Creator]:\n        \"\"\"list[Creator]: Creator List\"\"\"\n        return self._get_item_list(Creator)\n\n    @property\n    def softwares(self) -&gt; list[Software]:\n        \"\"\"list[Software]: Software List\"\"\"\n        return self._get_item_list(Software)\n\n    @property\n    def works(self) -&gt; list[Work]:\n        \"\"\"list[Work]: Work List\"\"\"\n        return self._get_item_list(Work)\n\n    @property\n    def entities(self) -&gt; list[Entity]:\n        \"\"\"list[Entity]: the subspace entities in the sourcefiles directory.\"\"\"\n        return get_entities(search_dir=self.sourcefiles_path)\n\n    @property\n    def subspace_tree(self) -&gt; SubspaceTree:\n        \"\"\"SubspaceTree: The subspace tree of this omoospace.\"\"\"\n        return SubspaceTree(self.sourcefiles_path)\n\n    @property\n    def subspace_tree_dict(self) -&gt; dict:\n        \"\"\"dict: The tree dict of subspace tree.\"\"\"\n        return self.subspace_tree.to_dict()\n\n    @property\n    def directory_tree(self,) -&gt; DirectoryTree:\n        \"\"\"DirectoryTree: The directory tree of this omoospace.\"\"\"\n        return DirectoryTree(search_dir=self.root_path)\n\n    @property\n    def imported_packages(self) -&gt; list[Package]:\n        \"\"\"list[Package]: The imported package list of this omoospace.\"\"\"\n        subdirs = [subdir for subdir in self.externaldata_path.iterdir()\n                   if subdir.is_dir()]\n\n        # Collect all Packages in ExternalData\n        packages = []\n        for subdir in subdirs:\n            profile_file_path = Path(subdir, 'Package.yml').resolve()\n            if profile_file_path.is_file():\n                packages.append(Package(subdir))\n\n        return packages\n\n    def is_contents_item(self, path: Path) -&gt; bool:\n        \"\"\"Check if path is contents item\n\n        Args:\n            path (Path): Input\n\n        Returns:\n            bool: result\n        \"\"\"\n        exists = path.exists()\n        in_contents = is_subpath(path, self.contents_path)\n        return exists and in_contents\n\n    def is_omoospace_item(self, path: Path) -&gt; bool:\n        \"\"\"Check if path is this omoospace item\n\n        Args:\n            path (Path): Input\n\n        Returns:\n            bool: result\n        \"\"\"\n        exists = path.exists()\n        in_omoospace = is_subpath(path, self.root_path)\n        not_in_stagedata = not is_subpath(\n            path, self.stageddata_path, or_equal=True)\n\n        not_profile_file = \\\n            'Omoospace.yml' != path.name \\\n            and 'Package.yml' != path.name \\\n            and 'Subspace.yml' not in path.name\n\n        return exists and in_omoospace and not_in_stagedata and not_profile_file\n\n    def get_subspace(self, identify: Union[Route, PathLike]) -&gt; Subspace:\n        \"\"\"Get subspace object by route or entity.\n\n        Args:\n            identify (Union[Route, PathLike]): Could be route or entity path\n\n        Raises:\n            TypeError: Not vaild identify type\n\n        Returns:\n            Subspace: The wanted subspace.\n        \"\"\"\n        if isinstance(identify, get_args(Route)):\n            route = identify\n            return self.subspace_tree.get(route)\n        elif isinstance(identify, get_args(PathLike)):\n            route = get_route(identify)\n            return self.subspace_tree.get(route)\n        else:\n            raise TypeError\n\n    def add_subspace(\n        self,\n        name: str,\n        parent_dir: PathLike = None,\n        description: str = None,\n        reveal_in_explorer: bool = True,\n        collect_entities: bool = True\n    ) -&gt; Subspace:\n        \"\"\"Add subspace to this omoospace.\n\n        Args:\n            name (str): Subspace name\n            parent_dir (PathLike, optional): Add subspace to which directory. Defaults to None.\n            description (str): str = Subspace description. Defaults to None.\n            reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n            collect_entities (bool, optional): Whether collect relative entities into it or not. Defaults to True.\n\n        Raises:\n            ExistsError: Target path already has one.\n            NotIncludeError: Parent directory is outside SourceFiles.\n            MoveFailed: Cannot move files.\n            CreateFailed: Cannot create directory.\n\n        Returns:\n            Subspace: New added subspace.\n        \"\"\"\n        parent_path = self.__check_parent_dir(parent_dir)\n\n        subs_dirname = format_name(name)\n        subs_path = Path(parent_path, subs_dirname).resolve()\n        subs_profile_path = Path(subs_path, 'Subspace.yml')\n\n        # Check if is exists\n        if subs_path.is_dir():\n            raise ExistsError(subs_path)\n\n        subs_profile = {\n            \"name\": name,\n            \"description\": description\n        }\n\n        # create directory\n        try:\n            subs_path.mkdir(parents=True, exist_ok=True)\n            with subs_profile_path.open('w', encoding='utf-8') as file:\n                yaml.dump(subs_profile, file)\n        except Exception as err:\n            raise CreateFailed(\"subspace directory\")\n\n        # collect entities that matched.\n        if (collect_entities):\n            try:\n                entities = get_entities(\n                    parent_path, recursive=False)\n\n                def is_match(entity: Entity):\n                    entity_name = entity.stem\n                    not_itself = entity_name != subs_dirname\n\n                    is_match = False\n                    entity_node_names = format_name(entity_name).split('_')\n                    subs_node_names = subs_dirname.split('_')\n                    for i in range(len(subs_node_names)):\n                        subs_suffix = '_'.join(subs_node_names[i:])\n                        entity_prefix = '_'.join(\n                            entity_node_names[:len(subs_node_names) - i])\n                        if subs_suffix == entity_prefix:\n                            is_match = True\n                            break\n                    return not_itself and is_match\n\n                # Remove entity that not match the name\n                entities = list(filter(is_match, entities))\n\n                for entity in entities:\n                    shutil.move(\n                        entity,\n                        Path(subs_path, entity.name).resolve()\n                    )\n            except:\n                raise MoveFailed('entities')\n\n        if reveal_in_explorer:\n            reveal_in_explorer(subs_path)\n\n        return self.get_subspace(subs_path)\n\n    def add_process(\n        self,\n        *processes: str,\n        parent_dir: PathLike = None,\n        add_sequence_number=True,\n        reveal_in_explorer: bool = True\n    ):\n        \"\"\"Add process to this omoospace.\n\n        Args:\n            *processes (str): a name list of processes, or single process name.\n            parent_dir (PathLike, optional): Add process to which directory.. Defaults to None.\n            add_sequence_number (str): Add sequence number to name. Defaults to True\n            reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n\n        Raises:\n            ExistsError: Target path already has one.\n            NotIncludeError: Parent directory is outside SourceFiles.\n            CreateFailed: Cannot create directory.\n        \"\"\"\n        parent_path = self.__check_parent_dir(parent_dir)\n\n        process_structure = {}\n        for i, p in enumerate(processes):\n            dirname = format_name(p)\n            if add_sequence_number and len(processes) &gt; 1:\n                dirname = '%03d-%s' % (i+1, dirname)\n            process_structure[dirname] = None\n\n        try:\n            # TODO: may not need directory any more.\n            DirectoryTree(process_structure).make_dirs(parent_path)\n        except Exception as err:\n            raise CreateFailed(\"process directory\")\n\n        if reveal_in_explorer:\n            reveal_in_explorer(parent_path)\n\n    def get_creator(self, email: str) -&gt; Creator:\n        \"\"\"Get Creator by email.\"\"\"\n        return ProfileItemList(self.creators).find('email', email)\n\n    def get_software(self, name: str) -&gt; Software:\n        \"\"\"Get Software by name.\"\"\"\n        return ProfileItemList(self.softwares).find('name', name)\n\n    def get_work(self, name: str) -&gt; Work:\n        \"\"\"Get Work by name.\"\"\"\n        return ProfileItemList(self.works).find('name', name)\n\n    def add_creator(\n        self,\n        email: str,\n        name: str,\n        website: str = None,\n        role: str = None,\n    ) -&gt; Creator:\n        \"\"\"Add creator to this omoospace.\n\n        Args:\n            email (str): Creator email\n            name (str): Creator name\n            website (str, optional): Creator website. Defaults to None.\n            role (str, optional): Creator role in omoospace. Defaults to None.\n\n        Raises:\n            InvalidError: Invalid email.\n            InvalidError: Invalid website.\n\n        Returns:\n            Creator: New added creator.\n        \"\"\"\n        if not is_email(email):\n            raise InvalidError(email, 'email')\n\n        if website and (not is_url(website)):\n            raise InvalidError(email, 'url')\n\n        creator = Creator({\n            'email': email,\n            'name': name,\n            'website': website,\n            'role': role\n        }, container=self)\n\n        self._set_profile_data(creator)\n\n        return creator\n\n    def add_software(\n        self,\n        name: str,\n        version: str,\n        plugins: list[Plugin] = None,\n    ) -&gt; Software:\n        \"\"\"Add software to this omoospace.\n\n        Args:\n            name (str): Software name\n            version (str): Software version.\n            plugins (list[Plugin], optional): Software plugins. Defaults to None.\n\n        Raises:\n            InvalidError: Invalid version.\n            InvalidError: Invalid plugin.\n\n        Returns:\n            Software: New added software.\n        \"\"\"\n\n        if not is_version(version):\n            raise InvalidError(version, 'version')\n\n        for plugin in plugins or []:\n            if (not plugin.get('name')) or (not plugin.get('version')):\n                raise InvalidError(plugin, 'plugin')\n\n        software = Software({\n            'name': name,\n            'version': version,\n            'plugins': plugins\n        }, container=self)\n\n        self._set_profile_data(software)\n\n        return software\n\n    def add_work(\n        self,\n        *items: PathLike,\n        name: str = None,\n        description: str = None\n    ) -&gt; Work:\n        \"\"\"Add work to this omoospace.\n\n        Args:\n            *items (list[PathLike]): Work items.\n            name (str): Work name. Defaults to None.\n            description (str, optional): Work description. Defaults to None.\n\n        Returns:\n            Work: New added work.\n        \"\"\"\n\n        items = self._to_work_items(items)\n        name = name or format_name(items[0].split('/')[-1])\n\n        work = Work({\n            \"name\": name,\n            \"description\": description,\n            \"items\": items\n        }, container=self)\n\n        self._set_profile_data(work)\n\n        return work\n\n    def export_package(\n        self,\n        *items: PathLike,\n        name: str = None,\n        export_dir: PathLike = '.',\n        description: str = None,\n        version: str = '0.1.0',\n        reveal_in_explorer: bool = True,\n        overwrite_existing: bool = True\n    ) -&gt; Package:\n        \"\"\"Export a package.\n\n        Args:\n            *items (PathLike): Items to export.\n            name (str, optional): Package name. Defaults to None.\n            export_dir (PathLike, optional): Package export directory. Defaults to None.\n            description (str, optional): Package description. Defaults to None.\n            reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n            overwrite_existing (bool, optional): Whether overwrite existing or not. Defaults to True.\n\n        Raises:\n            ExistsError: Target path already exists.\n            NotFoundError: No vaild item found.\n\n        Returns:\n            Package: New exported package.\n        \"\"\"\n        name = name or self.name\n        pkg_dirname = format_name(name)\n        pkg_path = Path(export_dir, pkg_dirname).resolve()\n\n        # Check if package dir exists\n        if (pkg_path.is_dir()):\n            if (overwrite_existing):\n                # TODO: increase version\n                shutil.rmtree(pkg_path, ignore_errors=True)\n            else:\n                raise ExistsError('package', pkg_path)\n\n        items: list[Path] = [Path(item).resolve() for item in items]\n        items = list(filter(self.is_omoospace_item, items))\n\n        # Check if is enouph items\n        if (len(items) == 0):\n            raise NotFoundError('vaild item')\n\n        pkg_profile = {\n            \"name\": name,\n            \"version\": version,\n            \"description\": description,\n            \"creators\": self.creators,\n        }\n\n        try:\n            pkg_path.mkdir(parents=True, exist_ok=True)\n            pkg_profile_path = Path(pkg_path, 'Package.yml')\n\n            with pkg_profile_path.open('w', encoding='utf-8') as file:\n                yaml.dump(pkg_profile, file)\n\n            for i in range(len(items)):\n                item = items[i]\n                item_relpath = item.relative_to(self.root_path)\n                copy_to(item, Path(pkg_path, item_relpath))\n\n        except Exception as err:\n            # Delete all if failed.\n            shutil.rmtree(pkg_path, ignore_errors=True)\n            raise Exception(\"Fail to export Package\", err)\n\n        if reveal_in_explorer:\n            reveal_in_explorer(pkg_path)\n\n        return Package(pkg_path)\n\n    def import_package(\n        self,\n        package_path: PathLike,\n        reveal_in_explorer: bool = True,\n        overwrite_existing: bool = True\n    ):\n        \"\"\"Imports the package into the ExternalData directory.\n\n        Args:\n            package_path (PathLike): Package directory.\n            reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n            overwrite_existing (bool, optional): Whether overwrite existing or not. Defaults to True.\n\n        Raises:\n            ExistsError: Target path already exists.\n        \"\"\"\n        # get package form import directory\n        package_path = Path(package_path).resolve()\n        package = Package(package_path)\n\n        # check if destination directory exists\n        pkg_path = Path(\n            self.root_path, 'ExternalData', format_name(package.name))\n        if (pkg_path.is_dir()):\n            if (overwrite_existing):\n                shutil.rmtree(pkg_path, ignore_errors=True)\n            else:\n                raise ExistsError('package', pkg_path)\n\n        if (package_path.suffix == \".zip\"):\n            with ZipFile(package_path, 'r') as zip:\n                zip.extractall(pkg_path)\n        else:\n            copy_to(package_path, pkg_path)\n\n        if reveal_in_explorer:\n            reveal_in_explorer(pkg_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.contents_path","title":"<code>contents_path: Path</code>  <code>property</code>","text":"<p>Path: Contents directory path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.creators","title":"<code>creators: list[Creator]</code>  <code>property</code>","text":"<p>list[Creator]: Creator List</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.directory_tree","title":"<code>directory_tree: DirectoryTree</code>  <code>property</code>","text":"<p>DirectoryTree: The directory tree of this omoospace.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.entities","title":"<code>entities: list[Entity]</code>  <code>property</code>","text":"<p>list[Entity]: the subspace entities in the sourcefiles directory.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.externaldata_path","title":"<code>externaldata_path: Path</code>  <code>property</code>","text":"<p>Path: ExternalData directory path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.imported_packages","title":"<code>imported_packages: list[Package]</code>  <code>property</code>","text":"<p>list[Package]: The imported package list of this omoospace.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.profile_path","title":"<code>profile_path: Path</code>  <code>property</code>","text":"<p>Path: Omoospace.yml file path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.references_path","title":"<code>references_path: Path</code>  <code>property</code>","text":"<p>Path: Reference directory path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.root_path","title":"<code>root_path: Path</code>  <code>property</code>","text":"<p>Path: Root path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.softwares","title":"<code>softwares: list[Software]</code>  <code>property</code>","text":"<p>list[Software]: Software List</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.sourcefiles_path","title":"<code>sourcefiles_path: Path</code>  <code>property</code>","text":"<p>Path: SourceFiles directory path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.stageddata_path","title":"<code>stageddata_path: Path</code>  <code>property</code>","text":"<p>Path: StagedData directory path.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.subspace_tree","title":"<code>subspace_tree: SubspaceTree</code>  <code>property</code>","text":"<p>SubspaceTree: The subspace tree of this omoospace.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.subspace_tree_dict","title":"<code>subspace_tree_dict: dict</code>  <code>property</code>","text":"<p>dict: The tree dict of subspace tree.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.works","title":"<code>works: list[Work]</code>  <code>property</code>","text":"<p>list[Work]: Work List</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.__init__","title":"<code>__init__(detect_dir)</code>","text":"<p>Initialize from existed omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>detect_dir</code> <code>PathLike</code> <p>The start directory for detecting omoospace. It could be the subdirectories of omoospace.</p> required <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Omoospace's name.</p> <code>description</code> <code>str</code> <p>Omoospace's description.</p> <p>Raises:</p> Type Description <code>NotFoundError</code> <p>No omoospace detected.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def __init__(self, detect_dir: PathLike):\n    \"\"\"Initialize from existed omoospace.\n\n    Args:\n        detect_dir (PathLike): The start directory for detecting omoospace. It could be the subdirectories of omoospace.\n\n    Attributes:\n        name (str): Omoospace's name.\n        description (str): Omoospace's description.\n\n    Raises:\n        NotFoundError: No omoospace detected.\n    \"\"\"\n    detect_path = Path(detect_dir).resolve()\n    detect_path_parents = [detect_path, *detect_path.parents]\n    omoos_path = None\n    for detect_path_parent in detect_path_parents:\n        omoos_profile_path = Path(detect_path_parent, 'Omoospace.yml')\n        if omoos_profile_path.exists():\n            omoos_path = detect_path_parent\n            break\n    if not omoos_path:\n        raise NotFoundError(\"omoospace\", detect_dir)\n\n    # path assignment\n    self._root_path = omoos_path\n    self._sourcefiles_path = Path(self.root_path, 'SourceFiles').resolve()\n    self._contents_path = Path(self.root_path, 'Contents').resolve()\n    self._externaldata_path = Path(\n        self.root_path, 'ExternalData').resolve()\n    self._stageddata_path = Path(self.root_path, 'StagedData').resolve()\n    self._references_path = Path(self.root_path, 'References').resolve()\n    self._profile_path = Path(self.root_path, \"Omoospace.yml\").resolve()\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.add_creator","title":"<code>add_creator(email, name, website=None, role=None)</code>","text":"<p>Add creator to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Creator email</p> required <code>name</code> <code>str</code> <p>Creator name</p> required <code>website</code> <code>str</code> <p>Creator website. Defaults to None.</p> <code>None</code> <code>role</code> <code>str</code> <p>Creator role in omoospace. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidError</code> <p>Invalid email.</p> <code>InvalidError</code> <p>Invalid website.</p> <p>Returns:</p> Name Type Description <code>Creator</code> <code>Creator</code> <p>New added creator.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_creator(\n    self,\n    email: str,\n    name: str,\n    website: str = None,\n    role: str = None,\n) -&gt; Creator:\n    \"\"\"Add creator to this omoospace.\n\n    Args:\n        email (str): Creator email\n        name (str): Creator name\n        website (str, optional): Creator website. Defaults to None.\n        role (str, optional): Creator role in omoospace. Defaults to None.\n\n    Raises:\n        InvalidError: Invalid email.\n        InvalidError: Invalid website.\n\n    Returns:\n        Creator: New added creator.\n    \"\"\"\n    if not is_email(email):\n        raise InvalidError(email, 'email')\n\n    if website and (not is_url(website)):\n        raise InvalidError(email, 'url')\n\n    creator = Creator({\n        'email': email,\n        'name': name,\n        'website': website,\n        'role': role\n    }, container=self)\n\n    self._set_profile_data(creator)\n\n    return creator\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.add_process","title":"<code>add_process(*processes, parent_dir=None, add_sequence_number=True, reveal_in_explorer=True)</code>","text":"<p>Add process to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>*processes</code> <code>str</code> <p>a name list of processes, or single process name.</p> <code>()</code> <code>parent_dir</code> <code>PathLike</code> <p>Add process to which directory.. Defaults to None.</p> <code>None</code> <code>add_sequence_number</code> <code>str</code> <p>Add sequence number to name. Defaults to True</p> <code>True</code> <code>reveal_in_explorer</code> <code>bool</code> <p>Whether open directory after or not. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>Target path already has one.</p> <code>NotIncludeError</code> <p>Parent directory is outside SourceFiles.</p> <code>CreateFailed</code> <p>Cannot create directory.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_process(\n    self,\n    *processes: str,\n    parent_dir: PathLike = None,\n    add_sequence_number=True,\n    reveal_in_explorer: bool = True\n):\n    \"\"\"Add process to this omoospace.\n\n    Args:\n        *processes (str): a name list of processes, or single process name.\n        parent_dir (PathLike, optional): Add process to which directory.. Defaults to None.\n        add_sequence_number (str): Add sequence number to name. Defaults to True\n        reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n\n    Raises:\n        ExistsError: Target path already has one.\n        NotIncludeError: Parent directory is outside SourceFiles.\n        CreateFailed: Cannot create directory.\n    \"\"\"\n    parent_path = self.__check_parent_dir(parent_dir)\n\n    process_structure = {}\n    for i, p in enumerate(processes):\n        dirname = format_name(p)\n        if add_sequence_number and len(processes) &gt; 1:\n            dirname = '%03d-%s' % (i+1, dirname)\n        process_structure[dirname] = None\n\n    try:\n        # TODO: may not need directory any more.\n        DirectoryTree(process_structure).make_dirs(parent_path)\n    except Exception as err:\n        raise CreateFailed(\"process directory\")\n\n    if reveal_in_explorer:\n        reveal_in_explorer(parent_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.add_software","title":"<code>add_software(name, version, plugins=None)</code>","text":"<p>Add software to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Software name</p> required <code>version</code> <code>str</code> <p>Software version.</p> required <code>plugins</code> <code>list[Plugin]</code> <p>Software plugins. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidError</code> <p>Invalid version.</p> <code>InvalidError</code> <p>Invalid plugin.</p> <p>Returns:</p> Name Type Description <code>Software</code> <code>Software</code> <p>New added software.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_software(\n    self,\n    name: str,\n    version: str,\n    plugins: list[Plugin] = None,\n) -&gt; Software:\n    \"\"\"Add software to this omoospace.\n\n    Args:\n        name (str): Software name\n        version (str): Software version.\n        plugins (list[Plugin], optional): Software plugins. Defaults to None.\n\n    Raises:\n        InvalidError: Invalid version.\n        InvalidError: Invalid plugin.\n\n    Returns:\n        Software: New added software.\n    \"\"\"\n\n    if not is_version(version):\n        raise InvalidError(version, 'version')\n\n    for plugin in plugins or []:\n        if (not plugin.get('name')) or (not plugin.get('version')):\n            raise InvalidError(plugin, 'plugin')\n\n    software = Software({\n        'name': name,\n        'version': version,\n        'plugins': plugins\n    }, container=self)\n\n    self._set_profile_data(software)\n\n    return software\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.add_subspace","title":"<code>add_subspace(name, parent_dir=None, description=None, reveal_in_explorer=True, collect_entities=True)</code>","text":"<p>Add subspace to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Subspace name</p> required <code>parent_dir</code> <code>PathLike</code> <p>Add subspace to which directory. Defaults to None.</p> <code>None</code> <code>description</code> <code>str</code> <p>str = Subspace description. Defaults to None.</p> <code>None</code> <code>reveal_in_explorer</code> <code>bool</code> <p>Whether open directory after or not. Defaults to True.</p> <code>True</code> <code>collect_entities</code> <code>bool</code> <p>Whether collect relative entities into it or not. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>Target path already has one.</p> <code>NotIncludeError</code> <p>Parent directory is outside SourceFiles.</p> <code>MoveFailed</code> <p>Cannot move files.</p> <code>CreateFailed</code> <p>Cannot create directory.</p> <p>Returns:</p> Name Type Description <code>Subspace</code> <code>Subspace</code> <p>New added subspace.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_subspace(\n    self,\n    name: str,\n    parent_dir: PathLike = None,\n    description: str = None,\n    reveal_in_explorer: bool = True,\n    collect_entities: bool = True\n) -&gt; Subspace:\n    \"\"\"Add subspace to this omoospace.\n\n    Args:\n        name (str): Subspace name\n        parent_dir (PathLike, optional): Add subspace to which directory. Defaults to None.\n        description (str): str = Subspace description. Defaults to None.\n        reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n        collect_entities (bool, optional): Whether collect relative entities into it or not. Defaults to True.\n\n    Raises:\n        ExistsError: Target path already has one.\n        NotIncludeError: Parent directory is outside SourceFiles.\n        MoveFailed: Cannot move files.\n        CreateFailed: Cannot create directory.\n\n    Returns:\n        Subspace: New added subspace.\n    \"\"\"\n    parent_path = self.__check_parent_dir(parent_dir)\n\n    subs_dirname = format_name(name)\n    subs_path = Path(parent_path, subs_dirname).resolve()\n    subs_profile_path = Path(subs_path, 'Subspace.yml')\n\n    # Check if is exists\n    if subs_path.is_dir():\n        raise ExistsError(subs_path)\n\n    subs_profile = {\n        \"name\": name,\n        \"description\": description\n    }\n\n    # create directory\n    try:\n        subs_path.mkdir(parents=True, exist_ok=True)\n        with subs_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(subs_profile, file)\n    except Exception as err:\n        raise CreateFailed(\"subspace directory\")\n\n    # collect entities that matched.\n    if (collect_entities):\n        try:\n            entities = get_entities(\n                parent_path, recursive=False)\n\n            def is_match(entity: Entity):\n                entity_name = entity.stem\n                not_itself = entity_name != subs_dirname\n\n                is_match = False\n                entity_node_names = format_name(entity_name).split('_')\n                subs_node_names = subs_dirname.split('_')\n                for i in range(len(subs_node_names)):\n                    subs_suffix = '_'.join(subs_node_names[i:])\n                    entity_prefix = '_'.join(\n                        entity_node_names[:len(subs_node_names) - i])\n                    if subs_suffix == entity_prefix:\n                        is_match = True\n                        break\n                return not_itself and is_match\n\n            # Remove entity that not match the name\n            entities = list(filter(is_match, entities))\n\n            for entity in entities:\n                shutil.move(\n                    entity,\n                    Path(subs_path, entity.name).resolve()\n                )\n        except:\n            raise MoveFailed('entities')\n\n    if reveal_in_explorer:\n        reveal_in_explorer(subs_path)\n\n    return self.get_subspace(subs_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.add_work","title":"<code>add_work(*items, name=None, description=None)</code>","text":"<p>Add work to this omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>*items</code> <code>list[PathLike]</code> <p>Work items.</p> <code>()</code> <code>name</code> <code>str</code> <p>Work name. Defaults to None.</p> <code>None</code> <code>description</code> <code>str</code> <p>Work description. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Work</code> <code>Work</code> <p>New added work.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_work(\n    self,\n    *items: PathLike,\n    name: str = None,\n    description: str = None\n) -&gt; Work:\n    \"\"\"Add work to this omoospace.\n\n    Args:\n        *items (list[PathLike]): Work items.\n        name (str): Work name. Defaults to None.\n        description (str, optional): Work description. Defaults to None.\n\n    Returns:\n        Work: New added work.\n    \"\"\"\n\n    items = self._to_work_items(items)\n    name = name or format_name(items[0].split('/')[-1])\n\n    work = Work({\n        \"name\": name,\n        \"description\": description,\n        \"items\": items\n    }, container=self)\n\n    self._set_profile_data(work)\n\n    return work\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.export_package","title":"<code>export_package(*items, name=None, export_dir='.', description=None, version='0.1.0', reveal_in_explorer=True, overwrite_existing=True)</code>","text":"<p>Export a package.</p> <p>Parameters:</p> Name Type Description Default <code>*items</code> <code>PathLike</code> <p>Items to export.</p> <code>()</code> <code>name</code> <code>str</code> <p>Package name. Defaults to None.</p> <code>None</code> <code>export_dir</code> <code>PathLike</code> <p>Package export directory. Defaults to None.</p> <code>'.'</code> <code>description</code> <code>str</code> <p>Package description. Defaults to None.</p> <code>None</code> <code>reveal_in_explorer</code> <code>bool</code> <p>Whether open directory after or not. Defaults to True.</p> <code>True</code> <code>overwrite_existing</code> <code>bool</code> <p>Whether overwrite existing or not. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>Target path already exists.</p> <code>NotFoundError</code> <p>No vaild item found.</p> <p>Returns:</p> Name Type Description <code>Package</code> <code>Package</code> <p>New exported package.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def export_package(\n    self,\n    *items: PathLike,\n    name: str = None,\n    export_dir: PathLike = '.',\n    description: str = None,\n    version: str = '0.1.0',\n    reveal_in_explorer: bool = True,\n    overwrite_existing: bool = True\n) -&gt; Package:\n    \"\"\"Export a package.\n\n    Args:\n        *items (PathLike): Items to export.\n        name (str, optional): Package name. Defaults to None.\n        export_dir (PathLike, optional): Package export directory. Defaults to None.\n        description (str, optional): Package description. Defaults to None.\n        reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n        overwrite_existing (bool, optional): Whether overwrite existing or not. Defaults to True.\n\n    Raises:\n        ExistsError: Target path already exists.\n        NotFoundError: No vaild item found.\n\n    Returns:\n        Package: New exported package.\n    \"\"\"\n    name = name or self.name\n    pkg_dirname = format_name(name)\n    pkg_path = Path(export_dir, pkg_dirname).resolve()\n\n    # Check if package dir exists\n    if (pkg_path.is_dir()):\n        if (overwrite_existing):\n            # TODO: increase version\n            shutil.rmtree(pkg_path, ignore_errors=True)\n        else:\n            raise ExistsError('package', pkg_path)\n\n    items: list[Path] = [Path(item).resolve() for item in items]\n    items = list(filter(self.is_omoospace_item, items))\n\n    # Check if is enouph items\n    if (len(items) == 0):\n        raise NotFoundError('vaild item')\n\n    pkg_profile = {\n        \"name\": name,\n        \"version\": version,\n        \"description\": description,\n        \"creators\": self.creators,\n    }\n\n    try:\n        pkg_path.mkdir(parents=True, exist_ok=True)\n        pkg_profile_path = Path(pkg_path, 'Package.yml')\n\n        with pkg_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(pkg_profile, file)\n\n        for i in range(len(items)):\n            item = items[i]\n            item_relpath = item.relative_to(self.root_path)\n            copy_to(item, Path(pkg_path, item_relpath))\n\n    except Exception as err:\n        # Delete all if failed.\n        shutil.rmtree(pkg_path, ignore_errors=True)\n        raise Exception(\"Fail to export Package\", err)\n\n    if reveal_in_explorer:\n        reveal_in_explorer(pkg_path)\n\n    return Package(pkg_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.get_creator","title":"<code>get_creator(email)</code>","text":"<p>Get Creator by email.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def get_creator(self, email: str) -&gt; Creator:\n    \"\"\"Get Creator by email.\"\"\"\n    return ProfileItemList(self.creators).find('email', email)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.get_software","title":"<code>get_software(name)</code>","text":"<p>Get Software by name.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def get_software(self, name: str) -&gt; Software:\n    \"\"\"Get Software by name.\"\"\"\n    return ProfileItemList(self.softwares).find('name', name)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.get_subspace","title":"<code>get_subspace(identify)</code>","text":"<p>Get subspace object by route or entity.</p> <p>Parameters:</p> Name Type Description Default <code>identify</code> <code>Union[Route, PathLike]</code> <p>Could be route or entity path</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>Not vaild identify type</p> <p>Returns:</p> Name Type Description <code>Subspace</code> <code>Subspace</code> <p>The wanted subspace.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def get_subspace(self, identify: Union[Route, PathLike]) -&gt; Subspace:\n    \"\"\"Get subspace object by route or entity.\n\n    Args:\n        identify (Union[Route, PathLike]): Could be route or entity path\n\n    Raises:\n        TypeError: Not vaild identify type\n\n    Returns:\n        Subspace: The wanted subspace.\n    \"\"\"\n    if isinstance(identify, get_args(Route)):\n        route = identify\n        return self.subspace_tree.get(route)\n    elif isinstance(identify, get_args(PathLike)):\n        route = get_route(identify)\n        return self.subspace_tree.get(route)\n    else:\n        raise TypeError\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.get_work","title":"<code>get_work(name)</code>","text":"<p>Get Work by name.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def get_work(self, name: str) -&gt; Work:\n    \"\"\"Get Work by name.\"\"\"\n    return ProfileItemList(self.works).find('name', name)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.import_package","title":"<code>import_package(package_path, reveal_in_explorer=True, overwrite_existing=True)</code>","text":"<p>Imports the package into the ExternalData directory.</p> <p>Parameters:</p> Name Type Description Default <code>package_path</code> <code>PathLike</code> <p>Package directory.</p> required <code>reveal_in_explorer</code> <code>bool</code> <p>Whether open directory after or not. Defaults to True.</p> <code>True</code> <code>overwrite_existing</code> <code>bool</code> <p>Whether overwrite existing or not. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>Target path already exists.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def import_package(\n    self,\n    package_path: PathLike,\n    reveal_in_explorer: bool = True,\n    overwrite_existing: bool = True\n):\n    \"\"\"Imports the package into the ExternalData directory.\n\n    Args:\n        package_path (PathLike): Package directory.\n        reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n        overwrite_existing (bool, optional): Whether overwrite existing or not. Defaults to True.\n\n    Raises:\n        ExistsError: Target path already exists.\n    \"\"\"\n    # get package form import directory\n    package_path = Path(package_path).resolve()\n    package = Package(package_path)\n\n    # check if destination directory exists\n    pkg_path = Path(\n        self.root_path, 'ExternalData', format_name(package.name))\n    if (pkg_path.is_dir()):\n        if (overwrite_existing):\n            shutil.rmtree(pkg_path, ignore_errors=True)\n        else:\n            raise ExistsError('package', pkg_path)\n\n    if (package_path.suffix == \".zip\"):\n        with ZipFile(package_path, 'r') as zip:\n            zip.extractall(pkg_path)\n    else:\n        copy_to(package_path, pkg_path)\n\n    if reveal_in_explorer:\n        reveal_in_explorer(pkg_path)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.is_contents_item","title":"<code>is_contents_item(path)</code>","text":"<p>Check if path is contents item</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Input</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>result</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def is_contents_item(self, path: Path) -&gt; bool:\n    \"\"\"Check if path is contents item\n\n    Args:\n        path (Path): Input\n\n    Returns:\n        bool: result\n    \"\"\"\n    exists = path.exists()\n    in_contents = is_subpath(path, self.contents_path)\n    return exists and in_contents\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Omoospace.is_omoospace_item","title":"<code>is_omoospace_item(path)</code>","text":"<p>Check if path is this omoospace item</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Input</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>result</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def is_omoospace_item(self, path: Path) -&gt; bool:\n    \"\"\"Check if path is this omoospace item\n\n    Args:\n        path (Path): Input\n\n    Returns:\n        bool: result\n    \"\"\"\n    exists = path.exists()\n    in_omoospace = is_subpath(path, self.root_path)\n    not_in_stagedata = not is_subpath(\n        path, self.stageddata_path, or_equal=True)\n\n    not_profile_file = \\\n        'Omoospace.yml' != path.name \\\n        and 'Package.yml' != path.name \\\n        and 'Subspace.yml' not in path.name\n\n    return exists and in_omoospace and not_in_stagedata and not_profile_file\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Software","title":"<code>Software</code>","text":"<p>             Bases: <code>ProfileItem</code></p> <p>Software</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Software name</p> <code>version</code> <code>str</code> <p>Software version.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>class Software(ProfileItem):\n    \"\"\"Software\n\n    Attributes:\n        name (str): Software name\n        version (str): Software version.\n    \"\"\"\n    name: str\n    version: str\n    _item_list_key = 'softwares'\n    _item_id_key = 'name'\n\n    @property\n    def plugins(self) -&gt; list[Plugin]:\n        \"\"\"list[Plugin]: Software plugin list.\"\"\"\n        plugins = self._get_data('plugins') or []\n        # remove plugin that is not dict\n        plugins = [plugin for plugin in plugins\n                   if isinstance(plugin, dict)]\n\n        # remove plugin that key value is None\n        plugins = [plugin for plugin in plugins\n                   if plugin.get('name')]\n\n        # remove duplicates in key\n        plugins = remove_duplicates(plugins, 'name')\n\n        # reassign modified data\n        self._set_data('plugins', plugins)\n\n        return plugins\n\n    def set_plugin(self, name: str, version: str):\n        \"\"\"Add or change plugin.\n\n        Args:\n            name (str): Plugin name.\n            version (str): Plugin version.\n        \"\"\"\n        plugins = self.plugins\n        for i, plugin in enumerate(plugins):\n            if plugin['name'] == name:\n                plugins[i] == {\"name\": name, \"verison\": version}\n                self._set_data('plugins', plugins)\n                return\n\n        plugins.append({\"name\": name, \"verison\": version})\n        self._set_data('plugins', plugins)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Software.plugins","title":"<code>plugins: list[Plugin]</code>  <code>property</code>","text":"<p>list[Plugin]: Software plugin list.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Software.set_plugin","title":"<code>set_plugin(name, version)</code>","text":"<p>Add or change plugin.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Plugin name.</p> required <code>version</code> <code>str</code> <p>Plugin version.</p> required Source code in <code>omoospace/omoospace.py</code> <pre><code>def set_plugin(self, name: str, version: str):\n    \"\"\"Add or change plugin.\n\n    Args:\n        name (str): Plugin name.\n        version (str): Plugin version.\n    \"\"\"\n    plugins = self.plugins\n    for i, plugin in enumerate(plugins):\n        if plugin['name'] == name:\n            plugins[i] == {\"name\": name, \"verison\": version}\n            self._set_data('plugins', plugins)\n            return\n\n    plugins.append({\"name\": name, \"verison\": version})\n    self._set_data('plugins', plugins)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Work","title":"<code>Work</code>","text":"<p>             Bases: <code>ProfileItem</code></p> <p>Work</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Work name.</p> <code>description</code> <code>str</code> <p>Work description.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>class Work(ProfileItem):\n    \"\"\"Work\n\n    Attributes:\n        name (str): Work name.\n        description (str): Work description.\n    \"\"\"\n    name: str\n    description: str\n    _item_list_key = 'works'\n    _item_id_key = 'name'\n\n    @property\n    def items(self) -&gt; list[str]:\n        \"\"\"list[str]: Work item list.\"\"\"\n        items = self._get_data('items')\n\n        # to remove invaild items\n        item_paths = self._container._to_work_item_paths(items)\n        vaild_items = self._container._to_work_items(item_paths)\n\n        self._set_data('items', vaild_items)\n        return vaild_items\n\n    def add_item(self, *items: PathLike):\n        \"\"\"Add item to this work.\n\n        Args:\n            *items (PathLike): Item paths.\n        \"\"\"\n        items = self._container._to_work_items(items)\n        # remove duplicates\n        self._set_data('items', list(dict.fromkeys([*self.items, *items])))\n\n    def set_items(self, *items: PathLike):\n        \"\"\"Set items to this work. Replace current itmes.\n\n        Args:\n            *items (PathLike): Item paths.\n        \"\"\"\n        items = self._container._to_work_items(items)\n        self._set_data('items', items)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Work.items","title":"<code>items: list[str]</code>  <code>property</code>","text":"<p>list[str]: Work item list.</p>"},{"location":"apis/omoospace/#omoospace.omoospace.Work.add_item","title":"<code>add_item(*items)</code>","text":"<p>Add item to this work.</p> <p>Parameters:</p> Name Type Description Default <code>*items</code> <code>PathLike</code> <p>Item paths.</p> <code>()</code> Source code in <code>omoospace/omoospace.py</code> <pre><code>def add_item(self, *items: PathLike):\n    \"\"\"Add item to this work.\n\n    Args:\n        *items (PathLike): Item paths.\n    \"\"\"\n    items = self._container._to_work_items(items)\n    # remove duplicates\n    self._set_data('items', list(dict.fromkeys([*self.items, *items])))\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.Work.set_items","title":"<code>set_items(*items)</code>","text":"<p>Set items to this work. Replace current itmes.</p> <p>Parameters:</p> Name Type Description Default <code>*items</code> <code>PathLike</code> <p>Item paths.</p> <code>()</code> Source code in <code>omoospace/omoospace.py</code> <pre><code>def set_items(self, *items: PathLike):\n    \"\"\"Set items to this work. Replace current itmes.\n\n    Args:\n        *items (PathLike): Item paths.\n    \"\"\"\n    items = self._container._to_work_items(items)\n    self._set_data('items', items)\n</code></pre>"},{"location":"apis/omoospace/#omoospace.omoospace.create_omoospace","title":"<code>create_omoospace(name, root_dir='.', description=None, structure=None, reveal_in_explorer=True)</code>","text":"<p>Create an omoospace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Omoospace name</p> required <code>root_dir</code> <code>PathLike</code> <p>Add omoospace to which directory. Defaults to '.'.</p> <code>'.'</code> <code>description</code> <code>str</code> <p>Omoospace description. Defaults to None.</p> <code>None</code> <code>structure</code> <code>OmoospaceStructure</code> <p>Omoospace structure. Defaults to None.</p> <code>None</code> <code>reveal_in_explorer</code> <code>bool</code> <p>Whether open directory after or not. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ExistsError</code> <p>Target path already exists.</p> <code>CreateFailed</code> <p>Fail to create directories.</p> <p>Returns:</p> Name Type Description <code>Omoospace</code> <code>Omoospace</code> <p>New created omoospace.</p> Source code in <code>omoospace/omoospace.py</code> <pre><code>def create_omoospace(\n    name: str,\n    root_dir: PathLike = '.',\n    description: str = None,\n    structure: OmoospaceStructure = None,\n    reveal_in_explorer: bool = True\n) -&gt; Omoospace:\n    \"\"\"Create an omoospace.\n\n    Args:\n        name (str): Omoospace name\n        root_dir (PathLike, optional): Add omoospace to which directory. Defaults to '.'.\n        description (str, optional): Omoospace description. Defaults to None.\n        structure (OmoospaceStructure, optional): Omoospace structure. Defaults to None.\n        reveal_in_explorer (bool, optional): Whether open directory after or not. Defaults to True.\n\n    Raises:\n        ExistsError: Target path already exists.\n        CreateFailed: Fail to create directories.\n\n    Returns:\n        Omoospace: New created omoospace.\n    \"\"\"\n    omoos_dirname = format_name(name)\n    omoos_path = Path(root_dir, omoos_dirname).resolve()\n\n    # Check if omoospace exists\n    if (omoos_path.is_dir()):\n        raise ExistsError('omoospace', root_dir)\n\n    # write omoospace profile to yml\n    omoos_profile = {\n        \"name\": name,  # can be any name style\n        \"description\": description,\n    }\n\n    try:\n        # create dirs\n        OmoospaceTree(structure).make_dirs(omoos_path)\n        omoos_profile_path = Path(omoos_path, 'Omoospace.yml')\n        with omoos_profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(omoos_profile, file)\n\n    except Exception as err:\n        shutil.rmtree(omoos_path, ignore_errors=True)\n        raise CreateFailed(\"omoospace directories\")\n\n    if reveal_in_explorer:\n        reveal_in_explorer(omoos_path)\n\n    return Omoospace(omoos_path)\n</code></pre>"},{"location":"apis/package/","title":"Package","text":""},{"location":"apis/package/#omoospace.package.Package","title":"<code>Package</code>","text":"<p>             Bases: <code>ProfileContainer</code></p> <p>The class of omoospace package.</p> <p>A package class instance is always refer to a existed package directory, not dummy. </p> <p>Usage: <pre><code>pkg = Package('path/to/package')\nprint(pkg.root_path)\n# &gt;&gt;&gt; path/to/package\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Package's name.</p> <code>description</code> <code>str</code> <p>Package's description.</p> <code>version</code> <code>str</code> <p>Package's version.</p> Source code in <code>omoospace/package.py</code> <pre><code>class Package(ProfileContainer):\n    \"\"\"The class of omoospace package.\n\n    A package class instance is always refer to a existed package directory, not dummy. \n\n    Usage:\n    ```python\n    pkg = Package('path/to/package')\n    print(pkg.root_path)\n    # &gt;&gt;&gt; path/to/package\n    ```\n\n    Attributes:\n        name (str): Package's name.\n        description (str): Package's description.\n        version (str): Package's version.\n    \"\"\"\n    name: str\n    description: str\n    version: str\n\n    def __init__(self, package_path: PathLike):\n        \"\"\"Initialize package .\n\n        Args:\n            package_path (PathLike): The package path.\n\n        Raises:\n            NotFoundError: No package detected.\n        \"\"\"\n        package_path = Path(package_path).resolve()\n        if (package_path.suffix == \".zip\"):\n            with ZipFile(package_path, 'r') as zip:\n                try:\n                    with zip.open('Package.yml') as file:\n                        pass\n                except:\n                    raise NotFoundError(\"package\", package_path)\n        else:\n            package_info_path = Path(package_path, 'Package.yml')\n            if not package_info_path.exists():\n                raise NotFoundError(\"package\", package_path)\n\n        self._root_path = package_path\n        self._profile_path = Path(self.root_path, \"Package.yml\").resolve()\n\n    @property\n    def root_path(self) -&gt; Path:\n        \"\"\"Path: Root path.\"\"\"\n        return self._root_path\n\n    @property\n    def profile_path(self) -&gt; Path:\n        \"\"\"Path: Package.yml file path.\"\"\"\n        return self._profile_path\n\n    def is_package_item(self, path: Path) -&gt; bool:\n        \"\"\"Check if path is package item\n\n        Args:\n            path (Path): Input\n\n        Returns:\n            bool: result\n        \"\"\"\n        exists = path.exists()\n        in_package = is_subpath(path, self.root_path)\n        not_profile_file = \\\n            'Omoospace.yml' != path.name \\\n            and 'Package.yml' != path.name \\\n            and 'Subspace.yml' not in path.name\n\n        return exists and in_package and not_profile_file\n\n    @property\n    def items(self) -&gt; list[Item]:\n        \"\"\"list[Item]: Package item list.\"\"\"\n        items: list[Item] = []\n        for root, dirs, files in os.walk(self.root_path):\n            for path in files:\n                child = Path(root, path).resolve()\n                if self.is_package_item(child):\n                    items.append(child)\n        return items\n</code></pre>"},{"location":"apis/package/#omoospace.package.Package.items","title":"<code>items: list[Item]</code>  <code>property</code>","text":"<p>list[Item]: Package item list.</p>"},{"location":"apis/package/#omoospace.package.Package.profile_path","title":"<code>profile_path: Path</code>  <code>property</code>","text":"<p>Path: Package.yml file path.</p>"},{"location":"apis/package/#omoospace.package.Package.root_path","title":"<code>root_path: Path</code>  <code>property</code>","text":"<p>Path: Root path.</p>"},{"location":"apis/package/#omoospace.package.Package.__init__","title":"<code>__init__(package_path)</code>","text":"<p>Initialize package .</p> <p>Parameters:</p> Name Type Description Default <code>package_path</code> <code>PathLike</code> <p>The package path.</p> required <p>Raises:</p> Type Description <code>NotFoundError</code> <p>No package detected.</p> Source code in <code>omoospace/package.py</code> <pre><code>def __init__(self, package_path: PathLike):\n    \"\"\"Initialize package .\n\n    Args:\n        package_path (PathLike): The package path.\n\n    Raises:\n        NotFoundError: No package detected.\n    \"\"\"\n    package_path = Path(package_path).resolve()\n    if (package_path.suffix == \".zip\"):\n        with ZipFile(package_path, 'r') as zip:\n            try:\n                with zip.open('Package.yml') as file:\n                    pass\n            except:\n                raise NotFoundError(\"package\", package_path)\n    else:\n        package_info_path = Path(package_path, 'Package.yml')\n        if not package_info_path.exists():\n            raise NotFoundError(\"package\", package_path)\n\n    self._root_path = package_path\n    self._profile_path = Path(self.root_path, \"Package.yml\").resolve()\n</code></pre>"},{"location":"apis/package/#omoospace.package.Package.is_package_item","title":"<code>is_package_item(path)</code>","text":"<p>Check if path is package item</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Input</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>result</p> Source code in <code>omoospace/package.py</code> <pre><code>def is_package_item(self, path: Path) -&gt; bool:\n    \"\"\"Check if path is package item\n\n    Args:\n        path (Path): Input\n\n    Returns:\n        bool: result\n    \"\"\"\n    exists = path.exists()\n    in_package = is_subpath(path, self.root_path)\n    not_profile_file = \\\n        'Omoospace.yml' != path.name \\\n        and 'Package.yml' != path.name \\\n        and 'Subspace.yml' not in path.name\n\n    return exists and in_package and not_profile_file\n</code></pre>"},{"location":"apis/subspace/","title":"Subspace","text":""},{"location":"apis/subspace/#omoospace.subspace.Subspace","title":"<code>Subspace</code>","text":"<p>Subspace object.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Subsapce display name.</p> <code>description</code> <code>str</code> <p>Subsapce description.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>class Subspace():\n    \"\"\"Subspace object.\n\n    Attributes:\n        name (str): Subsapce display name.\n        description (str): Subsapce description.\n    \"\"\"\n    name: str\n    description: str\n\n    def __init__(self, node: Node):\n        self._node = node\n\n    def __repr__(self):\n        return self.node_name\n\n    def __read_profile_file(self):\n        if self.profile_path.is_file():\n            with self.profile_path.open('r', encoding='utf-8') as file:\n                # aviod empty or invalid file\n                profile = yaml.load(file) or {}\n            return profile\n        else:\n            return {}\n\n    def __write_profile_file(self, profile):\n        with self.profile_path.open('w', encoding='utf-8') as file:\n            yaml.dump(profile, file)\n\n    def __getattr__(self, name):\n        if name in self.__annotations__.keys():\n            if self.type == SubspaceType.DUMMY:\n                return None\n            else:\n                profile = self.__read_profile_file()\n                return profile.get(name)\n        else:\n            return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        if name in self.__annotations__.keys():\n            if self.type == SubspaceType.DUMMY:\n                pass\n            else:\n                profile = self.__read_profile_file()\n                profile[name] = value\n                self.__write_profile_file(profile)\n        else:\n            object.__setattr__(self, name, value)\n\n    @property\n    def root_path(self) -&gt; Path:\n        \"\"\"Path: Subspace root path (directory subspace only).\"\"\"\n        for entity in self.entities:\n            if entity.is_dir():\n                return entity\n        return None\n\n    @property\n    def profile_path(self) -&gt; Path:\n        \"\"\"Path: Subspace profile file path.\"\"\"\n        if self.type == SubspaceType.DIRECTORY:\n            return Path(self.root_path, 'Subspace.yml').resolve()\n        elif self.type != SubspaceType.DUMMY:\n            entity = self.entities[0]\n            node = self\n            while True:\n                parent = node.parent\n                if not parent:\n                    dir_parent = None\n                    break\n                elif parent.type == SubspaceType.DIRECTORY:\n                    dir_parent = parent\n                    break\n                node = parent\n            sub_route = self.route[len(\n                dir_parent.route):] if dir_parent else self.route\n            profile_filename = '%s.Subspace.yml' % \"_\".join(sub_route)\n            return Path(entity.parent, profile_filename).resolve()\n        else:\n            return None\n\n    @property\n    def type(self) -&gt; SubspaceType:\n        \"\"\"SubspaceType: Subspace type.\"\"\"\n        if len(self.entities) != 0:\n            if len(self.endpoint_entities) != 0:\n                if self.root_path:\n                    return SubspaceType.DIRECTORY\n                else:\n                    return SubspaceType.FILE\n            else:\n                return SubspaceType.PHANTOM\n        else:\n            return SubspaceType.DUMMY\n\n    @property\n    def endpoint_entities(self) -&gt; list[Entity]:\n        \"\"\"list[Entity]: Subspace endpoint entities.\"\"\"\n        phantom_entities = []\n        for entity in self.entities:\n            node_names = format_name(entity.stem).split(\"_\")\n            if self.node_name == node_names[-1]:\n                phantom_entities.append(entity)\n        return phantom_entities\n\n    @property\n    def entities(self) -&gt; list[Entity]:\n        \"\"\"list[Entity]: Subspace entities.\"\"\"\n        entities = self._node.data.entities\n\n        def is_vaild(entity: Entity):\n            exists = entity.exists()\n            return exists\n\n        # real file/directory only. remove those not exists.\n        entities = list(filter(is_vaild, entities))\n        self._node.data.entities = entities\n\n        return entities\n\n    @property\n    def node_name(self) -&gt; str:\n        \"\"\"str: Subspace node name.\"\"\"\n        return self._node.data.node_name\n\n    @property\n    def parent(self) -&gt; \"Subspace\":\n        \"\"\"Subspace: Parent subspace.\"\"\"\n        node = self._node.parent\n        return Subspace(node) if node else None\n\n    @property\n    def route(self) -&gt; Route:\n        \"\"\"Route: Substance route.\"\"\"\n        path = self._node.path\n        return path.split(\"/\")[1:]\n\n    @property\n    def children(self) -&gt; list[\"Subspace\"]:\n        \"\"\"list[\"Subspace\"]: Children subspace.\"\"\"\n        nodes = self._node.children\n        return [Subspace(node) for node in nodes]\n\n    def _add_entity(self, *entities: Entity):\n        for entity in entities:\n            if entity not in self.entities:\n                self._node.data.entities.append(entity)\n\n    def add(self, node_name: str) -&gt; \"Subspace\":\n        \"\"\"Add dummy subpace to it.\n\n        Args:\n            node_name (str): New add subspace node name.\n\n        Returns:\n            Subspace: New added dummy subspace.\n        \"\"\"\n        node = self._node.add(SubspaceData(node_name))\n        return Subspace(node)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.children","title":"<code>children: list[Subspace]</code>  <code>property</code>","text":"<p>list[\"Subspace\"]: Children subspace.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.endpoint_entities","title":"<code>endpoint_entities: list[Entity]</code>  <code>property</code>","text":"<p>list[Entity]: Subspace endpoint entities.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.entities","title":"<code>entities: list[Entity]</code>  <code>property</code>","text":"<p>list[Entity]: Subspace entities.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.node_name","title":"<code>node_name: str</code>  <code>property</code>","text":"<p>str: Subspace node name.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.parent","title":"<code>parent: Subspace</code>  <code>property</code>","text":"<p>Subspace: Parent subspace.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.profile_path","title":"<code>profile_path: Path</code>  <code>property</code>","text":"<p>Path: Subspace profile file path.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.root_path","title":"<code>root_path: Path</code>  <code>property</code>","text":"<p>Path: Subspace root path (directory subspace only).</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.route","title":"<code>route: Route</code>  <code>property</code>","text":"<p>Route: Substance route.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.type","title":"<code>type: SubspaceType</code>  <code>property</code>","text":"<p>SubspaceType: Subspace type.</p>"},{"location":"apis/subspace/#omoospace.subspace.Subspace.add","title":"<code>add(node_name)</code>","text":"<p>Add dummy subpace to it.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>New add subspace node name.</p> required <p>Returns:</p> Name Type Description <code>Subspace</code> <code>Subspace</code> <p>New added dummy subspace.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def add(self, node_name: str) -&gt; \"Subspace\":\n    \"\"\"Add dummy subpace to it.\n\n    Args:\n        node_name (str): New add subspace node name.\n\n    Returns:\n        Subspace: New added dummy subspace.\n    \"\"\"\n    node = self._node.add(SubspaceData(node_name))\n    return Subspace(node)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree","title":"<code>SubspaceTree</code>","text":"<p>Subspace tree object.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>class SubspaceTree():\n    \"\"\"Subspace tree object.\"\"\"\n\n    def __init__(\n        self,\n        path: PathLike = None\n    ):\n        \"\"\"Initialize the subspace tree from the directory or certain entity.\n\n        Args:\n            path (PathLike, optional): Build subspace from path. Defaults to None.\n        \"\"\"\n        self._tree = Tree()\n        if path:\n            path = Path(path).resolve()\n            if path.is_dir():\n                self.from_dir(path)\n            elif path.is_file():\n                self.from_entity(path)\n            else:\n                NotFoundError()\n\n    def from_dir(\n        self,\n        search_dir: PathLike,\n        recursive: bool = True\n    ):\n        \"\"\"Build the subspace tree from directory.\n\n        It will search all vaild entities in giving directory, then build the tree based on those entities.\n\n        Args:\n            search_dir (PathLike): The search directory.\n            recursive (bool, optional): Whether recursive or not. Defaults to True.\n        \"\"\"\n        entities = get_entities(search_dir, recursive=recursive)\n        for entity in entities:\n            self.from_entity(entity)\n\n    def get(self, route: Route) -&gt; Subspace:\n        \"\"\"Get subspace by route.\n\n        Args:\n            route (Route): Input.\n\n        Returns:\n            Subspace: Result.\n        \"\"\"\n        node = self._tree.find(\n            match=lambda node: node.path == \"/\" + \"/\".join(route)\n        )\n        return Subspace(node) if node else None\n\n    def add(self, node_name: str) -&gt; Subspace:\n        \"\"\"Add dummy subpace to tree root.\n\n        Args:\n            node_name (str): New add subspace node name.\n\n        Returns:\n            Subspace: New added dummy subspace.\n        \"\"\"\n        node = self._tree.add(SubspaceData(node_name))\n        return Subspace(node)\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"Convert the tree to a common dict.\n\n        Returns:\n            dict: Result.\n        \"\"\"\n        def mapper(node: Node, data: dict):\n            data['data'] = Subspace(node)\n            return data\n        return self._tree.to_dict_list(mapper=mapper)\n\n    def from_entity(self, entity_path: PathLike):\n        \"\"\"Build the subspace tree from one certain entity.\n\n        The path must be real, not dummy.\n\n        Args:\n            entity_path (Entity): The giving entity.\n\n        Raises:\n            InvalidError: Invalid entity.\n        \"\"\"\n        route_entities = get_route_entities(entity_path)\n\n        node = self\n        for i in range(len(route_entities)):\n            d = route_entities[i]\n            route = [d.get('node_name') for d in route_entities[:i+1]]\n            node_name = d.get('node_name')\n            entities = d.get('entities')\n            subspace = self.get(route)\n            if not subspace:\n                subspace = node.add(node_name)\n            subspace._add_entity(*entities)\n            node = subspace\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.__init__","title":"<code>__init__(path=None)</code>","text":"<p>Initialize the subspace tree from the directory or certain entity.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>PathLike</code> <p>Build subspace from path. Defaults to None.</p> <code>None</code> Source code in <code>omoospace/subspace.py</code> <pre><code>def __init__(\n    self,\n    path: PathLike = None\n):\n    \"\"\"Initialize the subspace tree from the directory or certain entity.\n\n    Args:\n        path (PathLike, optional): Build subspace from path. Defaults to None.\n    \"\"\"\n    self._tree = Tree()\n    if path:\n        path = Path(path).resolve()\n        if path.is_dir():\n            self.from_dir(path)\n        elif path.is_file():\n            self.from_entity(path)\n        else:\n            NotFoundError()\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.add","title":"<code>add(node_name)</code>","text":"<p>Add dummy subpace to tree root.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>New add subspace node name.</p> required <p>Returns:</p> Name Type Description <code>Subspace</code> <code>Subspace</code> <p>New added dummy subspace.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def add(self, node_name: str) -&gt; Subspace:\n    \"\"\"Add dummy subpace to tree root.\n\n    Args:\n        node_name (str): New add subspace node name.\n\n    Returns:\n        Subspace: New added dummy subspace.\n    \"\"\"\n    node = self._tree.add(SubspaceData(node_name))\n    return Subspace(node)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.from_dir","title":"<code>from_dir(search_dir, recursive=True)</code>","text":"<p>Build the subspace tree from directory.</p> <p>It will search all vaild entities in giving directory, then build the tree based on those entities.</p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>PathLike</code> <p>The search directory.</p> required <code>recursive</code> <code>bool</code> <p>Whether recursive or not. Defaults to True.</p> <code>True</code> Source code in <code>omoospace/subspace.py</code> <pre><code>def from_dir(\n    self,\n    search_dir: PathLike,\n    recursive: bool = True\n):\n    \"\"\"Build the subspace tree from directory.\n\n    It will search all vaild entities in giving directory, then build the tree based on those entities.\n\n    Args:\n        search_dir (PathLike): The search directory.\n        recursive (bool, optional): Whether recursive or not. Defaults to True.\n    \"\"\"\n    entities = get_entities(search_dir, recursive=recursive)\n    for entity in entities:\n        self.from_entity(entity)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.from_entity","title":"<code>from_entity(entity_path)</code>","text":"<p>Build the subspace tree from one certain entity.</p> <p>The path must be real, not dummy.</p> <p>Parameters:</p> Name Type Description Default <code>entity_path</code> <code>Entity</code> <p>The giving entity.</p> required <p>Raises:</p> Type Description <code>InvalidError</code> <p>Invalid entity.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def from_entity(self, entity_path: PathLike):\n    \"\"\"Build the subspace tree from one certain entity.\n\n    The path must be real, not dummy.\n\n    Args:\n        entity_path (Entity): The giving entity.\n\n    Raises:\n        InvalidError: Invalid entity.\n    \"\"\"\n    route_entities = get_route_entities(entity_path)\n\n    node = self\n    for i in range(len(route_entities)):\n        d = route_entities[i]\n        route = [d.get('node_name') for d in route_entities[:i+1]]\n        node_name = d.get('node_name')\n        entities = d.get('entities')\n        subspace = self.get(route)\n        if not subspace:\n            subspace = node.add(node_name)\n        subspace._add_entity(*entities)\n        node = subspace\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.get","title":"<code>get(route)</code>","text":"<p>Get subspace by route.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>Route</code> <p>Input.</p> required <p>Returns:</p> Name Type Description <code>Subspace</code> <code>Subspace</code> <p>Result.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def get(self, route: Route) -&gt; Subspace:\n    \"\"\"Get subspace by route.\n\n    Args:\n        route (Route): Input.\n\n    Returns:\n        Subspace: Result.\n    \"\"\"\n    node = self._tree.find(\n        match=lambda node: node.path == \"/\" + \"/\".join(route)\n    )\n    return Subspace(node) if node else None\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.SubspaceTree.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert the tree to a common dict.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Result.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"Convert the tree to a common dict.\n\n    Returns:\n        dict: Result.\n    \"\"\"\n    def mapper(node: Node, data: dict):\n        data['data'] = Subspace(node)\n        return data\n    return self._tree.to_dict_list(mapper=mapper)\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.get_entities","title":"<code>get_entities(search_dir, recursive=True)</code>","text":"<p>Search all vaild entities in giving directory.</p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>PathLike</code> <p>The search directory.</p> required <code>recursive</code> <code>bool</code> <p>Whether recursive or not. Defaults to True.</p> <code>True</code> Source code in <code>omoospace/subspace.py</code> <pre><code>def get_entities(\n    search_dir: PathLike,\n    recursive: bool = True\n) -&gt; list[Entity]:\n    \"\"\"Search all vaild entities in giving directory.\n\n    Args:\n        search_dir (PathLike): The search directory.\n        recursive (bool, optional): Whether recursive or not. Defaults to True.\n    \"\"\"\n    search_path: Path = Path(search_dir).resolve()\n    entities: list[Entity] = []\n    if recursive:\n        # FIXME: replace this with Path.walk (python 3.12)\n        # https://docs.python.org/3/library/pathlib.html\n        for root, dirs, files in os.walk(search_path):\n            for path in [*dirs, *files]:\n                child = Path(root, path).resolve()\n                if is_entity(child):\n                    entities.append(child)\n    else:\n        for child in search_path.iterdir():\n            if is_entity(child):\n                entities.append(child)\n    return entities\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.get_route","title":"<code>get_route(entity_path)</code>","text":"<p>Returns the subspace route of a entity.</p> <p>Super useful for creating path of source file outputs. For example: <pre><code>route = get_route(\"path/to/SQ010/SQ010_AssetA.blend\")\n# &gt;&gt;&gt; ['SQ010','AssetA']\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>entity_path</code> <code>PathLike</code> <p>The giving entity.</p> required <p>Returns:</p> Name Type Description <code>Route</code> <code>Route</code> <p>Subspace route.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def get_route(entity_path: PathLike) -&gt; Route:\n    \"\"\"Returns the subspace route of a entity.\n\n    Super useful for creating path of source file outputs. For example:\n    ```python\n    route = get_route(\"path/to/SQ010/SQ010_AssetA.blend\")\n    # &gt;&gt;&gt; ['SQ010','AssetA']\n    ```\n\n    Args:\n        entity_path (PathLike): The giving entity.\n\n    Returns:\n        Route: Subspace route.\n    \"\"\"\n    route_entities = get_route_entities(entity_path)\n    route: Route = [d.get('node_name') for d in route_entities]\n    return route\n</code></pre>"},{"location":"apis/subspace/#omoospace.subspace.get_route_str","title":"<code>get_route_str(entity_path, *subsets)</code>","text":"<p>Returns the string based on entity's subspace route.</p> <p>Super useful for creating path of source file outputs. For example: <pre><code>string = get_route_str(\"path/to/SQ010/SQ010_AssetA.blend\",\"HighRes\",\"v001\")\n# &gt;&gt;&gt; SQ010_AssetA_HighRes_v001\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>entity_path</code> <code>PathLike</code> <p>The giving entity.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Result.</p> Source code in <code>omoospace/subspace.py</code> <pre><code>def get_route_str(entity_path: PathLike, *subsets: str) -&gt; str:\n    \"\"\"Returns the string based on entity's subspace route.\n\n    Super useful for creating path of source file outputs. For example:\n    ```python\n    string = get_route_str(\"path/to/SQ010/SQ010_AssetA.blend\",\"HighRes\",\"v001\")\n    # &gt;&gt;&gt; SQ010_AssetA_HighRes_v001\n    ```\n\n    Args:\n        entity_path (PathLike): The giving entity.\n\n    Returns:\n        str: Result.\n    \"\"\"\n    route = get_route(entity_path)\n    route.extend(subsets)\n    return \"_\".join(route)\n</code></pre>"}]}